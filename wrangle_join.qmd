---
title: "Joining Data"
---

## Library Loading

Begin by loading any needed libraries

:::panel-tabset
## `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` R

Load the `tidyverse` meta-package as well as our vertebrate data.

```{r r-start, warning = F, message = F}
# Load needed library
library(tidyverse)
```

## `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` Python

Load the Pandas library as well as our vertebrate data.

```{python py-libs}
# Load needed library
import pandas as pd
```
:::

## Combining DataFrames

Sometimes we collected related data and store them in separate files. This necessitates integrating the two datasets later on for statistics and/or visualization. If the two datasets that are sampled at very different frequencies (e.g., annual temperature values and daily insect counts), trying to include both in a single file results in duplicating the less granular data _many_ times. This is not ideal. Fortunately, scripted languages provide several methods for combining data easily and appropriately so that they can be used together despite being stored separately.

To illustrate some of these methods we'll load some new simulated data on lichen coverage to use instead of the vertebrate data we've used in past modules.

:::panel-tabset
## `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` R

Load the vertebrate data first.

```{r r-data1}
# Load data
vert_r <- read.csv(file = "data/verts.csv")

# Check out first few rows
head(vert_r, n = 2)
```

Then load the dataset with lichen community composition on trees.

```{r r-data2}
# Load data
lich <- read.csv(file = "data/tree_lichen.csv")

# Check out rows rows
head(lich, n = 2)
```

And finally load the data that includes distance from the nearest road for some of the same trees for which we have lichen data.

```{r r-data3}
# Load data
road <- read.csv(file = "data/tree_road.csv")

# Check out rows
head(road, n = 2)
```

## `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` Python

Load the vertebrate data first.

```{python py-data1}
# Load data
vert_py = pd.read_csv("data/verts.csv")

# Check out first few rows
vert_py.head(2)
```

Then load the dataset with lichen community composition on trees.

```{python py-data2}
# Load data
lich = pd.read_csv("data/tree_lichen.csv")

# Check out rows
lich.head(2)
```

And finally load the data that includes distance from the nearest road for some of the same trees for which we have lichen data.

```{python py-data3}
# Load data
road = pd.read_csv("data/tree_road.csv")

# Check out rows
road.head(2)
```

:::

## Concatenating Data

The simplest way of combining data in either `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` <span style="color:#077DC2">Python</span> or `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` <span style="color:#FF9B00">R</span> is called "concatenation". This involves--essentially--pasting rows or columns of separate data <span style="color:#077DC2">variables</span>/<span style="color:#FF9B00">objects</span> together.

We'll need to modify our vertebrate data somewhat in order to demonstrate the two modes (horizontal or vertical) of concatenating <span style="color:#077DC2">DataFrames</span>/<span style="color:#FF9B00">data.frames</span>.

Concatenating data (either horizontally or vertically) in this way is _deeply_ risky in that it can easily result in creating rows or columns that appear to relate to one another but in actuality do not. However, it is still worthwhile to cover how this can be done.

:::panel-tabset
## `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` R

Split the first and last two rows of the vertebrate data into separate objects. Note that in each we'll want to retain all columns.

```{r r-concat-prep}
# Split the two datasets
vert_r_top <- vert_r[1:2, ]
vert_r_bottom <- vert_r[(nrow(vert_r) - 1):nrow(vert_r), ]

# Look at one
vert_r_bottom
```

## `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` Python

Split the first and last two rows of the vertebrate data into separate variables. Note that in each we'll want to retain all columns.

```{python py-concat-prep}
# Split the two datasets
vert_py_top = vert_py.iloc[[0, 1], :]
vert_py_bottom = vert_py.iloc[[-1, -2], :]

# Look at one
vert_py_bottom
```
:::

### Vertical Concatenation

Vertical concatenation (i.e., concatenating by stacking rows on top of each other) is one option for concatenation. This is much more common than horizontal concatenation.

:::panel-tabset
## `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` R

R can perform this operation with the `rbind` function (from base R) but the `bind_rows` function (from the `dplyr` package) is preferable because it checks for matching column names and--if necessary--reorders columns to match between the two data objects.

```{r r-rowbind}
# Combine vertically
vert_r_vertical <- dplyr::bind_rows(vert_r_top, vert_r_bottom)

# Check shape before and after to demonstrate it worked
message("There were two rows each before concatenation and ", nrow(vert_r_vertical), " after")
```

## `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` Python

Python does horizontal concatenation with the `concat` function from the Pandas library. This function does horizontal and vertical concatenation and uses the `axis` argument to determine which is done. Setting `axis` to `0` performs vertical concatenation.

```{python py-rowbind}
# Combine vertically
vert_py_vertical = pd.concat([vert_py_top, vert_py_bottom], axis = 0)

# Check shape before and after to demonstrate it worked
print("There were two rows each before concatenation and", len(vert_py_vertical), "after")
```
:::

### Horizontal Concatenation

Horizontal concatenation (i.e., concatenating by putting columns next to one another) is the other option for concatenation. Note that it assumes row orders are consistent and _won't perform any check for improper row combinations_. Also, both languages will create duplicate column <span style="color:#077DC2">labels</span>/<span style="color:#FF9B00">names</span> in our example because both data <span style="color:#077DC2">variables</span>/<span style="color:#FF9B00">objects</span> have the same column <span style="color:#077DC2">labels</span>/<span style="color:#FF9B00">names</span>.

:::panel-tabset
## `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` R

R does horizontal concatenation with the `cbind` function from base R. 

```{r r-colbind}
# Combine horizontally
vert_r_horiz <- cbind(vert_r_top, vert_r_bottom)

# Check columns to show they were added
names(vert_r_horiz)
```

## `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` Python

Setting the `axis` argument to `1` is how the `concat` function is switched to horizontal concatenation.

```{python py-colbind}
# Combine horizontally
vert_py_horiz = pd.concat([vert_py_top, vert_py_bottom], axis = 1)

# Check columns to show they were added
vert_py_horiz.columns
```
:::

## Joins

A less risky mode of combining separate data objects is to use "joins".

### Left / Right Joins



### Inner Joins



### Full Joins


<span style="color:#077DC2">variables</span>/<span style="color:#FF9B00">objects</span>

