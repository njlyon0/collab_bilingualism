{
  "hash": "c805616f6638ca81895a9461a2e6757a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Text Methods\"\nengine: knitr\n---\n\n\n## Overview\n\nData stored as text (i.e., [string]{.py}/[object]{.r} or [character]{.r}) is notoriously typo-prone and often requires extensive quality control checks throughout the data tidying process. Below is a--non exhaustive--set of common text methods that may prove valuable to people interested in dealing with text data in either [{{< fa brands python >}} Python]{.py} or [{{< fa brands r-project >}} R]{.r}.\n\n## Find & Replace\n\nThe bulk of text tidying often boils down to finding unwanted [strings]{.py}/[characters]{.r} and replacing them with desired variants. This operation is how computers handle fixing typos.\n\n:::panel-tabset\n## [{{< fa brands r-project >}} R]{.r}\n\nWe can use the [{{< fa brands r-project >}} R]{.r} function `gsub` to find and replace (part of) a character object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a vector of characters\ntext_r <- c(\"he1lo\", \"HELLO\", \"bye\")\n\n# Find and replace the number \"1\" with an \"L\"\nfix1_r <- gsub(pattern = \"1\", replacement = \"l\", x = text_r)\n\n# Print the result\nprint(fix1_r)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"hello\" \"HELLO\" \"bye\"  \n```\n\n\n:::\n:::\n\n\n## [{{< fa brands python >}} Python]{.py}\n\nWe can use the [{{< fa brands python >}} Python]{.py} method `replace` to find and replace (part of) a string/object variable.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Make a list of strings\ntext_py = [\"he1lo\", \"HELLO\", \"bye\"]\n\n# Find and replace the number \"1\" with an \"L\"\nfix1_py = [item.replace(\"1\", \"l\") for item in text_py]\n\n# Print the result\nprint(fix1_py)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['hello', 'HELLO', 'bye']\n```\n\n\n:::\n:::\n\n\nNote that we have to loop across our list to do this operation in this language.\n:::\n\n## Casing\n\nText casing (i.e., either UPPERCASE or lowercase) is also a frequent source of issues in code as many scripted operations are sensitive to text case. We can coerce to upper or lowercase as needed though with relative ease.\n\n:::panel-tabset\n## [{{< fa brands r-project >}} R]{.r}\n\nWe can use the `tolower` or `toupper` functions to coerce all text into lower or uppercase respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Coerce everything to lowercase\nfix2_r <- tolower(x = fix1_r)\n\n# Print the result\nprint(fix2_r)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"hello\" \"hello\" \"bye\"  \n```\n\n\n:::\n:::\n\n\n## [{{< fa brands python >}} Python]{.py}\n\nWe can use the `lower` or `upper` methods to coerce all text into lower or uppercase respectively.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Coerce everything to lowercase\nfix2_py = [item.lower() for item in fix1_py]\n\n# Print the result\nprint(fix2_py)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['hello', 'hello', 'bye']\n```\n\n\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}