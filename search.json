[
  {
    "objectID": "terms.html",
    "href": "terms.html",
    "title": "Glossary",
    "section": "",
    "text": "Learning a programming language is just like learning a spoken language: there are a lot of terms and definitions to learn! To complicate matters for an R / Python bilingualism context like this one, the two programming languages sometimes use the same term with very different definitions attached. To hopefully streamline term acquisition / comparison, I’m compiling a glossary of crucial R and Python terms below and (where applicable) re-capitulating the other languages’ definition for terms that occur in both languages.\n\nr fontawesome::fa(name = \"r-project\", fill = \"#FF9B00\", a11y = \"sem\") R Termsr fontawesome::fa(name = \"python\", fill = \"#077DC2\", a11y = \"sem\") Python Terms"
  },
  {
    "objectID": "terms.html#overview",
    "href": "terms.html#overview",
    "title": "Glossary",
    "section": "",
    "text": "Learning a programming language is just like learning a spoken language: there are a lot of terms and definitions to learn! To complicate matters for an R / Python bilingualism context like this one, the two programming languages sometimes use the same term with very different definitions attached. To hopefully streamline term acquisition / comparison, I’m compiling a glossary of crucial R and Python terms below and (where applicable) re-capitulating the other languages’ definition for terms that occur in both languages.\n\nr fontawesome::fa(name = \"r-project\", fill = \"#FF9B00\", a11y = \"sem\") R Termsr fontawesome::fa(name = \"python\", fill = \"#077DC2\", a11y = \"sem\") Python Terms"
  },
  {
    "objectID": "wrangle_data.html",
    "href": "wrangle_data.html",
    "title": "Data Operations",
    "section": "",
    "text": "Once you get a sense for the core rules of your programming language of choice, you can move on to working with a data table that is more realistically complex."
  },
  {
    "objectID": "wrangle_data.html#overview",
    "href": "wrangle_data.html#overview",
    "title": "Data Operations",
    "section": "",
    "text": "Once you get a sense for the core rules of your programming language of choice, you can move on to working with a data table that is more realistically complex."
  },
  {
    "objectID": "wrangle_data.html#library-loading",
    "href": "wrangle_data.html#library-loading",
    "title": "Data Operations",
    "section": "Library Loading",
    "text": "Library Loading\nThis step assumes that you have already installed the needed packages. That said, we still need to re-load those libraries for them to be accessible from here on out.\n\nR Project RPython Python\n\n\n\nlibrary(tidyverse)\n\n\n\n\nimport pandas as pd"
  },
  {
    "objectID": "wrangle_data.html#data-import",
    "href": "wrangle_data.html#data-import",
    "title": "Data Operations",
    "section": "Data Import",
    "text": "Data Import\nWe can now load an external dataset derived from the lterdatasampler R package (see here) with both R and python. This relatively simple operation is also a nice chance to showcase how ‘namespacing’ (i.e., indicating which package a given function comes from) differs between the two languages.\n\nR Project RPython Python\n\n\nNamespacing in R is accomplished by doing package_name::function_name and is optional (though, in my opinion, good practice!)\n\nvert_r &lt;- utils::read.csv(file = 'data/verts.csv')\n\n\n\nIn python, namespacing is required and is done via package_name.function_name.\n\nvert_py = pd.read_csv('data/verts.csv')"
  },
  {
    "objectID": "wrangle_data.html#making-heads-or-tails-of-data",
    "href": "wrangle_data.html#making-heads-or-tails-of-data",
    "title": "Data Operations",
    "section": "Making Heads or Tails of Data",
    "text": "Making Heads or Tails of Data\nChecking the ‘head’ or ‘tail’ of the data (i.e., the first or last few rows of the data respectively) is a nice way of getting a sense for the general format of the dataframe being assessed.\n\nR Project RPython Python\n\n\nIn R, we use the head or tail function and can use an optional n argument to specify the number of rows to return as an integer (default is 6 rows). Functions in R act on contents inside of parentheses.\n\nutils::head(vert_r, n = 2)\n\n  year sitecode section reach pass unitnum unittype vert_index pitnumber\n1 1987 MACKCC-L      CC     L    1       1        R          1        NA\n2 1987 MACKCC-L      CC     L    1       1        R          2        NA\n          species length_1_mm length_2_mm weight_g clip sampledate notes\n1 Cutthroat trout          58          NA     1.75 NONE 1987-10-07      \n2 Cutthroat trout          61          NA     1.95 NONE 1987-10-07      \n\nutils::tail(vert_r, n = 3)\n\n      year sitecode section reach pass unitnum unittype vert_index pitnumber\n32207 2019 MACKOG-U      OG     U    2      16        C         24   1043547\n32208 2019 MACKOG-U      OG     U    2      16        C         25   1043583\n32209 2019 MACKOG-U      OG     U    2      16        C         26   1043500\n                       species length_1_mm length_2_mm weight_g clip sampledate\n32207 Coastal giant salamander          67         120      9.6 NONE 2019-09-05\n32208 Coastal giant salamander          74         131     14.3 NONE 2019-09-05\n32209 Coastal giant salamander          73         128     11.6 NONE 2019-09-05\n            notes\n32207            \n32208            \n32209 Terrestrial\n\n\n\n\nIn python we also use a head or tail function but instead of placing the data object inside of parentheses attached to the function we append the function name after the name of the data object separated by a period. This is visually similar to how we namespace functions in python! You can again specify an integer number of rows to return (the default is 5)\n\nvert_py.head(3)\n\n   year  sitecode section reach  ...  weight_g  clip  sampledate  notes\n0  1987  MACKCC-L      CC     L  ...      1.75  NONE  1987-10-07    NaN\n1  1987  MACKCC-L      CC     L  ...      1.95  NONE  1987-10-07    NaN\n2  1987  MACKCC-L      CC     L  ...      5.60  NONE  1987-10-07    NaN\n\n[3 rows x 16 columns]\n\nvert_py.tail(2)\n\n       year  sitecode section reach  ...  weight_g  clip  sampledate        notes\n32207  2019  MACKOG-U      OG     U  ...      14.3  NONE  2019-09-05          NaN\n32208  2019  MACKOG-U      OG     U  ...      11.6  NONE  2019-09-05  Terrestrial\n\n[2 rows x 16 columns]"
  },
  {
    "objectID": "wrangle_data.html#dataframe-classes",
    "href": "wrangle_data.html#dataframe-classes",
    "title": "Data Operations",
    "section": "Dataframe Classes",
    "text": "Dataframe Classes\nDataframes have their own class that is different than those of simpler objects.\n\nR Project RPython Python\n\n\n\n# Check class of a data object\nclass(vert_r)\n\n[1] \"data.frame\"\n\n\n\n\n\n# Check type of a data object\ntype(vert_py)\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;"
  },
  {
    "objectID": "wrangle_data.html#data-structure",
    "href": "wrangle_data.html#data-structure",
    "title": "Data Operations",
    "section": "Data Structure",
    "text": "Data Structure\n\nFull Data Object\nOften we want to check the ‘structure’ of a data table. This includes the of each column in the data\n\nR Project RPython Python\n\n\nR uses the str function to assess data structure (not to be confused with the python object class “str”).\n\nstr(vert_r)\n\n'data.frame':   32209 obs. of  16 variables:\n $ year       : int  1987 1987 1987 1987 1987 1987 1987 1987 1987 1987 ...\n $ sitecode   : chr  \"MACKCC-L\" \"MACKCC-L\" \"MACKCC-L\" \"MACKCC-L\" ...\n $ section    : chr  \"CC\" \"CC\" \"CC\" \"CC\" ...\n $ reach      : chr  \"L\" \"L\" \"L\" \"L\" ...\n $ pass       : int  1 1 1 1 1 1 1 1 1 1 ...\n $ unitnum    : num  1 1 1 1 1 1 1 1 1 1 ...\n $ unittype   : chr  \"R\" \"R\" \"R\" \"R\" ...\n $ vert_index : int  1 2 3 4 5 6 7 8 9 10 ...\n $ pitnumber  : int  NA NA NA NA NA NA NA NA NA NA ...\n $ species    : chr  \"Cutthroat trout\" \"Cutthroat trout\" \"Cutthroat trout\" \"Cutthroat trout\" ...\n $ length_1_mm: int  58 61 89 58 93 86 107 131 103 117 ...\n $ length_2_mm: int  NA NA NA NA NA NA NA NA NA NA ...\n $ weight_g   : num  1.75 1.95 5.6 2.15 6.9 5.9 10.5 20.6 9.55 13 ...\n $ clip       : chr  \"NONE\" \"NONE\" \"NONE\" \"NONE\" ...\n $ sampledate : chr  \"1987-10-07\" \"1987-10-07\" \"1987-10-07\" \"1987-10-07\" ...\n $ notes      : chr  \"\" \"\" \"\" \"\" ...\n\n\n\n\n\nvert_py.dtypes\n\nyear             int64\nsitecode        object\nsection         object\nreach           object\npass             int64\nunitnum        float64\nunittype        object\nvert_index       int64\npitnumber      float64\nspecies         object\nlength_1_mm    float64\nlength_2_mm    float64\nweight_g       float64\nclip            object\nsampledate      object\nnotes           object\ndtype: object\n\n\n\n\n\n\n\nSpecific Column\nYou may want to check the structure of only a single column. For this, we need to use an ‘operator’ to access a single column within the dataframe object by that column’s name. Note the operator differs between the two languages.\n\nR Project RPython Python\n\n\nIn R, we use the $ operator (e.g., data_name$column_name) to access that column and pass it to functions for further processing.\n\n# Check structure of a particular column\nstr(vert_r$vert_index)\n\n int [1:32209] 1 2 3 4 5 6 7 8 9 10 ...\n\n\n\n\nIn python, we separate the dataframe name from the column name with a . (e.g., data_name.column_name) and append the function to the end with another . between.\n\n# Check structure of a particular column\nvert_py.vert_index.dtype\n\ndtype('int64')"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "I think of myself as a competent R coder but am a total novice when it comes to Python. This repository is my attempt at forcing myself to ‘eat my vegetables’ and gain basic competency in Python. I think trying for a 1-to-1 R translation to Python will be an effective learning method (at least to start) and enshrining it in a Quarto website will keep me rigorous about documenting my process."
  },
  {
    "objectID": "index.html#package-installation",
    "href": "index.html#package-installation",
    "title": "Welcome!",
    "section": "Package Installation",
    "text": "Package Installation\nUsing either R or python requires using “functions” that are contained in “packages” we can install on a given computer. This saves us from having to reinvent the wheel for every even moderately complex operation that we want to perform. The following code chunks are not evaluated in the building of this website but you’ll need to install these packages on your local machine (if you haven’t already done so) in order to run the code in the rest of this translation tutorial.\n\nR Project RPython Python\n\n\nR contains an install.packages function for installing packages.\n\n# Install the 'tidyverse' meta-package\ninstall.packages(\"tidyverse\")\n\n\n\nNote that python package installation is done through the CLI (command line interface) a.k.a. “bash”.\n\n# Install the following python packages\npython3 -m pip install pandas\npython3 -m pip install numpy\npython3 -m pip install matplotlib\npython3 -m pip install jupyterlab\n## `plotnine` is `ggplot2` in python!\npython3 -m pip install plotnine"
  },
  {
    "objectID": "index.html#section-overviews",
    "href": "index.html#section-overviews",
    "title": "Welcome!",
    "section": "Section Overviews",
    "text": "Section Overviews\n\nData Wrangling\nThe beating heart of my day to day work revolves around data ‘wrangling’. I view ‘wrangling’ as any scripted data manipulations between the very first raw data entered digitally and the data being ready for any analysis/visualization. This covers a huge swath of operations and should allow me to explore Python equivalents to many of the R operations that I know and love."
  },
  {
    "objectID": "index.html#additional-resources",
    "href": "index.html#additional-resources",
    "title": "Welcome!",
    "section": "Additional Resources",
    "text": "Additional Resources\nI’m not the first to have this idea so there are other useful Python tutorials and specifically R-Python bilingualism resources. See below:\n\nThe Carpentries has a “Data Analysis and Visualization in Python for Ecologists” lesson that is really well put-together (as is characteristic of The Carpentries’ content)\nThe Earth Lab has a Python course that was recommended to me by an NCEAS employee (specifically section 4)\nDr. Diba Mirza taught a UCSB Computer Science (CS8) course on Python\nESIIL (Environmental Data Science Innovation and Inclusion Lab) has made a workshop attempting to teach this same topic. I anticipate my tutorial will borrow heavily from this resource\nMarie Rivers also made a website for exploring Quarto more generally that I’ve found super helpful for its facet dealing with R/Python bilingualism"
  },
  {
    "objectID": "workbench.html",
    "href": "workbench.html",
    "title": "Workbench",
    "section": "",
    "text": "Place to store snippets of code / formatting that I’ll be copy/pasting a bunch"
  },
  {
    "objectID": "workbench.html#template-tabset-panel-area",
    "href": "workbench.html#template-tabset-panel-area",
    "title": "Workbench",
    "section": "Template Tabset Panel Area",
    "text": "Template Tabset Panel Area\n\nR Project RPython Python\n\n\n\n# X\n\n\n\n\n# X"
  },
  {
    "objectID": "wrangle_basics.html",
    "href": "wrangle_basics.html",
    "title": "Fundamentals",
    "section": "",
    "text": "This section covers the most fundamental operations / terms of R and python. Object assignment, classes, etc."
  },
  {
    "objectID": "wrangle_basics.html#overview",
    "href": "wrangle_basics.html#overview",
    "title": "Fundamentals",
    "section": "",
    "text": "This section covers the most fundamental operations / terms of R and python. Object assignment, classes, etc."
  },
  {
    "objectID": "wrangle_basics.html#library-loading",
    "href": "wrangle_basics.html#library-loading",
    "title": "Fundamentals",
    "section": "Library Loading",
    "text": "Library Loading\nThis section assumes you’ve already installed the needed python / R packages. See the chunks in the home page of this website if you need a refresher on which packages are needed. It is not enough to install a package onto a given computer, you also have to specifically load that library into your working environment for its functions to be available to you in a specific script / document.\n\nR Project RPython Python\n\n\nR libraries are loaded with the library function\n\nlibrary(tidyverse)\n\n\n\npython libraries are loaded with import and can be aliased into simpler names with as at the same time.\n\nimport numpy as np"
  },
  {
    "objectID": "wrangle_basics.html#class-type",
    "href": "wrangle_basics.html#class-type",
    "title": "Fundamentals",
    "section": "Class & Type",
    "text": "Class & Type\nWe often want to know the “class” of an object to know what operations we can perform on that object. For example, we can only do arithmetic operations on objects that are some kind “numeric” (R) / “float” (python) or “integer” (both).\n\nR Project RPython Python\n\n\nIn R we use the class function to get this information. Note that the class of text in R is “character”.\n\n# Check class of an integer\nclass(37)\n\n[1] \"numeric\"\n\n# Check class of a decimal\nclass(3.14159)\n\n[1] \"numeric\"\n\n# Check class of text\nclass(\"my hands are typing words\")\n\n[1] \"character\"\n\n\n\n\nIn python, the type function returns the class of the data object. Note that the text has class of “str” (short for string).\n\n# Check type of an integer\ntype(37)\n\n# Check type of a decimal\n\n&lt;class 'int'&gt;\n\ntype(3.14159)\n\n# Check type of text\n\n&lt;class 'float'&gt;\n\ntype(\"my hands are typing words\")\n\n&lt;class 'str'&gt;"
  },
  {
    "objectID": "wrangle_basics.html#character-counting",
    "href": "wrangle_basics.html#character-counting",
    "title": "Fundamentals",
    "section": "Character Counting",
    "text": "Character Counting\nSometimes we want to know how many characters are in a given string. Note that in python this is called “length” which is not the same as “length” in an R context. In R, “length” refers to the number of elements in a vector and ‘number of characters’ is a better parallel for “length” sensu python.\n\nR Project RPython Python\n\n\nIn R, we use the nchar function (short for ‘number of characters’).\n\nnchar(\"Hello\")\n\n[1] 5\n\n\n\n\nIn python, the equivalent function is len.\n\nlen(\"Hello\")\n\n5"
  },
  {
    "objectID": "wrangle_basics.html#concatenation",
    "href": "wrangle_basics.html#concatenation",
    "title": "Fundamentals",
    "section": "Concatenation",
    "text": "Concatenation\nWe can add multiple objects together with concatenation in both languages but how they get added together differs in an important way between the two.\n\nR Project RPython Python\n\n\nIn R, we use the c function and separate each element with commas. We are left with a vector of however many elements were included in the concatenation function. To get a similar output to how python treats concatenation we actually have to use the paste0 function.\n\n# R concatenation\nc(\"Hello\", \"friend\")\n\n[1] \"Hello\"  \"friend\"\n\n# R version of python concatenation\npaste0(\"Hello\", \"friend\")\n\n[1] \"Hellofriend\"\n\n\n\n\nIn python, concatenation uses plus signs (+) instead of the function-based approach of R. In order to concatenate elements into a vector (like R does), we need to use the array function in the numpy package.\n\n# python concatenation\n\"Hello\" + \"friend\"\n\n# python version of R concatenation\n## Make a \"list\" (not the same as an R list)\n\n'Hellofriend'\n\npy_concat_list = [\"Hello\", \"friend\"]\n\n## Use the relevant numpy function\npy_concat_vec = np.array(py_concat_list)\n\n## Print that to display it visually\nprint(py_concat_vec)\n\n['Hello' 'friend']"
  },
  {
    "objectID": "wrangle_basics.html#repetition",
    "href": "wrangle_basics.html#repetition",
    "title": "Fundamentals",
    "section": "Repetition",
    "text": "Repetition\nIf you want to repeat a string that is also a supported operation\n\nR Project RPython Python\n\n\nR uses the rep function with a times argument to specify the number of times to repeat.\n\nrep(x = \"Bye\", times = 3)\n\n[1] \"Bye\" \"Bye\" \"Bye\"\n\n\n\n\nIn python, we can use an asterisk as shorthand for repetition with the thing to repeat on the left and the number of repetitions on the right.\n\n\"Bye\" * 3\n\n'ByeByeBye'"
  },
  {
    "objectID": "wrangle_basics.html#string-indexing",
    "href": "wrangle_basics.html#string-indexing",
    "title": "Fundamentals",
    "section": "String Indexing",
    "text": "String Indexing\nWe may also want to access the _n_th element of a character string. We can do that by “indexing”. In both python and R we use square brackets (\\[\\]) to do this but there are two key differences. In R, we index an element of a vector and the first index value is 1 but in python we’re indexing a character in a string and the index begins at 0.\n\nR Project RPython Python\n\n\n\n# Access third element of a vector\nc(\"Hello\", \"my\", \"friend\")[3]\n\n[1] \"friend\"\n\n\n\n\nNote again the the “third” character is actually the fourth letter because the first letter’s index value is 0!\n\n# Access third character of a string\n\"friend\"[3]\n\n'e'"
  }
]