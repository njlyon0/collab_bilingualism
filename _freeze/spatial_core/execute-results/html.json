{
  "hash": "0fdea5390d6a3b69932860f4b360a335",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Spatial Fundamentals\"\nengine: knitr\n---\n\n\n## Spatial Data Types\n\nThere are two primary types of spatial data: _raster_ and _vector_ data. [{{< fa brands python >}} Python]{.py} and [{{< fa brands r-project >}} R]{.r} can both handle either of these types so coding language doesn't matter but there are fundamental structural differences between the two data types. See below for more information about each.\n\n:::panel-tabset\n### Raster Data\n\nRaster data stores information in pixels. Each pixel is located at a specific geographic location (i.e., a specific X and Y coordinate pair). These pixel values can be continuous (e.g., rainfall, elevation, etc.) or categorical (e.g., land cover categories, date of first green up, etc.). Even if you've never worked with spatial data before you've certainly worked with rasters: technically every digital image is a raster!\n\n<u>Raster files are typically GeoTIFFs and use the `.tif` extension.</u>\n\nConsider this visual depiction of raster data:\n\n<figure align=\"center\">\n  <img src=\"images/spatial/raster_diagram.png\" alt=\"Picture of a forest with an inset showing how the pixels in that image relate to information stored in each pixel\" width=\"65%\">\n  <figcaption>Image Source - National Ecological Observatory Network (NEON)</figcaption>\n</figure>\n\n### Vector Data\n\nVector data store information in \"features\". These features use specific geographic points (again, think X and Y coordinates) and store information about the geometric relationship among features. This allows vector data to be in terms of particular geometries like points, lines, or polygons.\n\n<u>Vector data are typically preserved as shapefiles and use **several extensions**.</u> When we refer to shapefiles in code we only refer to the `.shp` file but there are several associated files that must also be present in the same folder for the data to be read properly. These usually include `.dbf`, `.prj`, and `.shx` but there may sometimes also be a `.xml` file or two. For our purposes, the specifics of these files are not relevant but it is important to remember that you will need them in order to work with vector data.\n\nConsider this visual depiction of vector data:\n\n<figure align=\"center\">\n  <img src=\"images/spatial/vector_diagram.png\" alt=\"Diagram of points, lines (points connected by lines), and polygons (three or more points that define the edges of a shape)\" width=\"65%\">\n  <figcaption>Image Source - National Ecological Observatory Network (NEON)</figcaption>\n</figure>\n\n:::\n\n## Coordinate Reference Systems (CRS)\n\nWhile raster and vector data may both refer to non-spatial or spatial data, true spatial data _requires_ a coordinate reference system (CRS). CRS has a very specific format that all geospatial applications (including [{{< fa brands python >}} Python]{.py} and [{{< fa brands r-project >}} R]{.r}!) use to display/process the data correctly. CRS includes three components:\n\n1. **Datum** -- a model for the shape of the earth. It defines the starting coordinate pair and angular units that--when used with the starting point--define a particular spot on the planet. There can be global datums (e.g., WGS84, NAD83, etc.) that apply anywhere on the planet and local datums that work well for a particular area but do not work outside of that area\n2. **Projection** -- mathematical transformation to get from a round planet to a flat map\n3. **Additional Parameters** -- any other information necessary to support the projection (e.g., the coordinates of the center of the map, etc.)\n\nA hopefully useful analogy is to consider the datum as a choice between a set of citrus fruits of varying shapes (e.g., lemon, orange, grapefruit, etc.) while the projection is a set of instructions on how to flatten the peel of the chosen fruit.\n\n#### CRS Importance\n\nCoordinate reference systems may sound dry and uninteresting--even in a pretty technical coding context--but they are vitally important! For many scientific purposes we want to know how a set of points intersect with a given map or how well several maps line up. To answer questions like these or interpret virtually any geospatial information, we must make sure that each spatial component uses the same CRS. Some coordinate reference systems use similar units which can mean a quick glance makes all spatial data _seem_ interoperable while in reality the data cannot be directly compared without transforming to a standard CRS.\n\nA rule of thumb that may help is that <u>_every_ spatial script you write should be very careful to check the CRS(s) used by the data.</u>\n\n## Additional Resources\n\nSpatial operations have gotten _a ton_ of attention in both [{{< fa brands python >}} Python]{.py} and [{{< fa brands r-project >}} R]{.r}! This website is mostly focused on translating between the two languages though so much of this nuance is not covered here. For those interested in a deeper dive in spatial computing, consider the following.\n\n- [{{< fa brands r-project >}} R]{.r} -- The Data Carpentries has a solid [\"Introduction to Geospatial Concepts\"](https://datacarpentry.org/organization-geospatial/index.html) lesson\n- [{{< fa brands r-project >}} R]{.r} -- [Rachel King](https://github.com/king0708) created a really nice [\"Spatial Data Visualization\"](https://github.com/king0708/spatial-data-viz) workshop\n- [{{< fa brands python >}} Python]{.py} -- The Arctic Data Center made a \"Scalable and Computationally Reproducible Approaches to Arctic Resources\" course that includes a [\"Spatial and Image Data Using GeoPandas\"](https://learning.nceas.ucsb.edu/2023-03-arctic/sections/geopandas.html#calculate-total-distance-per-fishing-area) chapter\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}