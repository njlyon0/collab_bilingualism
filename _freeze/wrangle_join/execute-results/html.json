{
  "hash": "71c171d72918e81d9c397ec7ac2a7767",
  "result": {
    "markdown": "---\ntitle: \"Joining Data\"\n---\n\n\n## Library Loading\n\nBegin by loading any needed libraries\n\n:::panel-tabset\n## `<svg aria-label=\"R Project\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#FF9B00;overflow:visible;position:relative;\"><title>R Project</title><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html} R\n\nLoad the `tidyverse` meta-package as well as our vertebrate data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load needed library\nlibrary(tidyverse)\n```\n:::\n\n\n## `<svg aria-label=\"Python\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#077DC2;overflow:visible;position:relative;\"><title>Python</title><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html} Python\n\nLoad the Pandas library as well as our vertebrate data.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Load needed library\nimport pandas as pd\n```\n:::\n\n:::\n\n## Combining DataFrames\n\nSometimes we collected related data and store them in separate files. This necessitates integrating the two datasets later on for statistics and/or visualization. If the two datasets that are sampled at very different frequencies (e.g., annual temperature values and daily insect counts), trying to include both in a single file results in duplicating the less granular data _many_ times. This is not ideal. Fortunately, scripted languages provide several methods for combining data easily and appropriately so that they can be used together despite being stored separately.\n\nTo illustrate some of these methods we'll load some new simulated data on lichen coverage to use instead of the vertebrate data we've used in past modules.\n\n:::panel-tabset\n## `<svg aria-label=\"R Project\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#FF9B00;overflow:visible;position:relative;\"><title>R Project</title><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html} R\n\nLoad the vertebrate data first.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data\nvert_r <- read.csv(file = \"data/verts.csv\")\n\n# Check out first few rows\nhead(vert_r, n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  year sitecode section reach pass unitnum unittype vert_index pitnumber\n1 1987 MACKCC-L      CC     L    1       1        R          1        NA\n2 1987 MACKCC-L      CC     L    1       1        R          2        NA\n          species length_1_mm length_2_mm weight_g clip sampledate notes\n1 Cutthroat trout          58          NA     1.75 NONE 1987-10-07      \n2 Cutthroat trout          61          NA     1.95 NONE 1987-10-07      \n```\n:::\n:::\n\n\nThen load the dataset with lichen community composition on trees.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data\nlich <- read.csv(file = \"data/tree_lichen.csv\")\n\n# Check out rows rows\nhead(lich, n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    tree lichen_foliose lichen_fruticose lichen_crustose\n1 Tree_A           1.00              0.9            0.95\n2 Tree_B           0.35              1.0            0.00\n```\n:::\n:::\n\n\nAnd finally load the data that includes distance from the nearest road for some of the same trees for which we have lichen data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data\nroad <- read.csv(file = \"data/tree_road.csv\")\n\n# Check out rows\nhead(road, n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  tree_name dist_to_road_m\n1    Tree_A             13\n2    Tree_C             10\n```\n:::\n:::\n\n\n## `<svg aria-label=\"Python\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#077DC2;overflow:visible;position:relative;\"><title>Python</title><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html} Python\n\nLoad the vertebrate data first.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Load data\nvert_py = pd.read_csv(\"data/verts.csv\")\n\n# Check out first few rows\nvert_py.head(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   year  sitecode section reach  ...  weight_g  clip  sampledate  notes\n0  1987  MACKCC-L      CC     L  ...      1.75  NONE  1987-10-07    NaN\n1  1987  MACKCC-L      CC     L  ...      1.95  NONE  1987-10-07    NaN\n\n[2 rows x 16 columns]\n```\n:::\n:::\n\n\nThen load the dataset with lichen community composition on trees.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Load data\nlich = pd.read_csv(\"data/tree_lichen.csv\")\n\n# Check out rows\nlich.head(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     tree  lichen_foliose  lichen_fruticose  lichen_crustose\n0  Tree_A            1.00               0.9             0.95\n1  Tree_B            0.35               1.0             0.00\n```\n:::\n:::\n\n\nAnd finally load the data that includes distance from the nearest road for some of the same trees for which we have lichen data.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Load data\nroad = pd.read_csv(\"data/tree_road.csv\")\n\n# Check out rows\nroad.head(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  tree_name  dist_to_road_m\n0    Tree_A              13\n1    Tree_C              10\n```\n:::\n:::\n\n\n:::\n\n## Concatenating Data\n\nThe simplest way of combining data in either `<svg aria-label=\"Python\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#077DC2;overflow:visible;position:relative;\"><title>Python</title><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html} <span style=\"color:#077DC2\">Python</span> or `<svg aria-label=\"R Project\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#FF9B00;overflow:visible;position:relative;\"><title>R Project</title><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html} <span style=\"color:#FF9B00\">R</span> is called \"concatenation\". This involves--essentially--pasting rows or columns of separate data <span style=\"color:#077DC2\">variables</span>/<span style=\"color:#FF9B00\">objects</span> together.\n\nWe'll need to modify our vertebrate data somewhat in order to demonstrate the two modes (horizontal or vertical) of concatenating <span style=\"color:#077DC2\">DataFrames</span>/<span style=\"color:#FF9B00\">data.frames</span>.\n\nConcatenating data (either horizontally or vertically) in this way is _deeply_ risky in that it can easily result in creating rows or columns that appear to relate to one another but in actuality do not. However, it is still worthwhile to cover how this can be done.\n\n:::panel-tabset\n## `<svg aria-label=\"R Project\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#FF9B00;overflow:visible;position:relative;\"><title>R Project</title><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html} R\n\nSplit the first and last two rows of the vertebrate data into separate objects. Note that in each we'll want to retain all columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Split the two datasets\nvert_r_top <- vert_r[1:2, ]\nvert_r_bottom <- vert_r[(nrow(vert_r) - 1):nrow(vert_r), ]\n\n# Look at one\nvert_r_bottom\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      year sitecode section reach pass unitnum unittype vert_index pitnumber\n32208 2019 MACKOG-U      OG     U    2      16        C         25   1043583\n32209 2019 MACKOG-U      OG     U    2      16        C         26   1043500\n                       species length_1_mm length_2_mm weight_g clip sampledate\n32208 Coastal giant salamander          74         131     14.3 NONE 2019-09-05\n32209 Coastal giant salamander          73         128     11.6 NONE 2019-09-05\n            notes\n32208            \n32209 Terrestrial\n```\n:::\n:::\n\n\n## `<svg aria-label=\"Python\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#077DC2;overflow:visible;position:relative;\"><title>Python</title><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html} Python\n\nSplit the first and last two rows of the vertebrate data into separate variables. Note that in each we'll want to retain all columns.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Split the two datasets\nvert_py_top = vert_py.iloc[[0, 1], :]\nvert_py_bottom = vert_py.iloc[[-1, -2], :]\n\n# Look at one\nvert_py_bottom\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       year  sitecode section reach  ...  weight_g  clip  sampledate        notes\n32208  2019  MACKOG-U      OG     U  ...      11.6  NONE  2019-09-05  Terrestrial\n32207  2019  MACKOG-U      OG     U  ...      14.3  NONE  2019-09-05          NaN\n\n[2 rows x 16 columns]\n```\n:::\n:::\n\n:::\n\n### Vertical Concatenation\n\nVertical concatenation (i.e., concatenating by stacking rows on top of each other) is one option for concatenation. This is much more common than horizontal concatenation.\n\n:::panel-tabset\n## `<svg aria-label=\"R Project\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#FF9B00;overflow:visible;position:relative;\"><title>R Project</title><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html} R\n\nR can perform this operation with the `rbind` function (from base R) but the `bind_rows` function (from the `dplyr` package) is preferable because it checks for matching column names and--if necessary--reorders columns to match between the two data objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine vertically\nvert_r_vertical <- dplyr::bind_rows(vert_r_top, vert_r_bottom)\n\n# Check shape before and after to demonstrate it worked\nmessage(\"There were two rows each before concatenation and \", nrow(vert_r_vertical), \" after\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThere were two rows each before concatenation and 4 after\n```\n:::\n:::\n\n\n## `<svg aria-label=\"Python\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#077DC2;overflow:visible;position:relative;\"><title>Python</title><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html} Python\n\nPython does horizontal concatenation with the `concat` function from the Pandas library. This function does horizontal and vertical concatenation and uses the `axis` argument to determine which is done. Setting `axis` to `0` performs vertical concatenation.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Combine vertically\nvert_py_vertical = pd.concat([vert_py_top, vert_py_bottom], axis = 0)\n\n# Check shape before and after to demonstrate it worked\nprint(\"There were two rows each before concatenation and\", len(vert_py_vertical), \"after\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThere were two rows each before concatenation and 4 after\n```\n:::\n:::\n\n:::\n\n### Horizontal Concatenation\n\nHorizontal concatenation (i.e., concatenating by putting columns next to one another) is the other option for concatenation. Note that it assumes row orders are consistent and _won't perform any check for improper row combinations_. Also, both languages will create duplicate column <span style=\"color:#077DC2\">labels</span>/<span style=\"color:#FF9B00\">names</span> in our example because both data <span style=\"color:#077DC2\">variables</span>/<span style=\"color:#FF9B00\">objects</span> have the same column <span style=\"color:#077DC2\">labels</span>/<span style=\"color:#FF9B00\">names</span>.\n\n:::panel-tabset\n## `<svg aria-label=\"R Project\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#FF9B00;overflow:visible;position:relative;\"><title>R Project</title><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html} R\n\nR does horizontal concatenation with the `cbind` function from base R. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine horizontally\nvert_r_horiz <- cbind(vert_r_top, vert_r_bottom)\n\n# Check columns to show they were added\nnames(vert_r_horiz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"year\"        \"sitecode\"    \"section\"     \"reach\"       \"pass\"       \n [6] \"unitnum\"     \"unittype\"    \"vert_index\"  \"pitnumber\"   \"species\"    \n[11] \"length_1_mm\" \"length_2_mm\" \"weight_g\"    \"clip\"        \"sampledate\" \n[16] \"notes\"       \"year\"        \"sitecode\"    \"section\"     \"reach\"      \n[21] \"pass\"        \"unitnum\"     \"unittype\"    \"vert_index\"  \"pitnumber\"  \n[26] \"species\"     \"length_1_mm\" \"length_2_mm\" \"weight_g\"    \"clip\"       \n[31] \"sampledate\"  \"notes\"      \n```\n:::\n:::\n\n\n## `<svg aria-label=\"Python\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#077DC2;overflow:visible;position:relative;\"><title>Python</title><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html} Python\n\nSetting the `axis` argument to `1` is how the `concat` function is switched to horizontal concatenation.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Combine horizontally\nvert_py_horiz = pd.concat([vert_py_top, vert_py_bottom], axis = 1)\n\n# Check columns to show they were added\nvert_py_horiz.columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['year', 'sitecode', 'section', 'reach', 'pass', 'unitnum', 'unittype',\n       'vert_index', 'pitnumber', 'species', 'length_1_mm', 'length_2_mm',\n       'weight_g', 'clip', 'sampledate', 'notes', 'year', 'sitecode',\n       'section', 'reach', 'pass', 'unitnum', 'unittype', 'vert_index',\n       'pitnumber', 'species', 'length_1_mm', 'length_2_mm', 'weight_g',\n       'clip', 'sampledate', 'notes'],\n      dtype='object')\n```\n:::\n:::\n\n:::\n\n## Joins\n\nWhile concatentation is simple and effective in some cases, a less risky mode of combining separate data objects is to use \"joins\". Joins allow two data <span style=\"color:#077DC2\">variables</span>/<span style=\"color:#FF9B00\">objects</span> to be combined in an appropriate order based on a column found in both data <span style=\"color:#077DC2\">variables</span>/<span style=\"color:#FF9B00\">objects</span>. This shared column (or column_s_) are known as \"join keys\".\n\nThis module makes use of simulated data on lichen coverage on various trees and the distance of those trees to the nearest road. Lichen wasn't surveyed on all of the trees and not all trees that _did_ have lichen measured had their distance to the nearest road recorded. Vertical concatenation is inappropriate because the column <span style=\"color:#077DC2\">labels</span>/<span style=\"color:#FF9B00\">names</span> and horizontal concatenation is incorrect because we want to make sure we only combine data from the same tree across the two datasets.\n\nThere are several variants of joins that each function slightly differently so we'll discuss each below.\n\n### Left / Right Joins\n\n\n\n### Inner Joins\n\n\n\n### Full Joins\n\n\n<span style=\"color:#077DC2\">variables</span>/<span style=\"color:#FF9B00\">objects</span>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}