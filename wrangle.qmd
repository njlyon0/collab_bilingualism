---
title: "Data Wrangling"
---

## Overview

The beating heart of my day to day work revolves around data 'wrangling'. I view 'wrangling' as any **scripted** data manipulations between the very first raw data entered digitally and the data being ready for any analysis/visualization. This covers a huge swath of operations and should allow me to explore Python equivalents to many of the R operations that I know and love.

## Package Installation

The loading of external packages containing the functions we require to actually do the bulk of data wrangling is an important preliminary step. I won't evaluate the code chunks below but you'll need to if you don't already have these packages on your local machine.

:::panel-tabset
## `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` R

```{r, eval = F}
# Install the 'tidyverse' meta-package and 'lterdatasampler' package
install.packages("tidyverse")
install.packages("lterdatasampler")
```

## `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` Python

Note that Python package installation is done through the CLI (<u>c</u>ommand <u>l</u>ine <u>i</u>nterface)
```{bash, eval = F}
# Install the 'pandas' package
python3 -m pip install pandas
```
:::

## Library Loading

It is not enough to install a package onto a given computer, you also have to specifically load that library into your working environment for its functions to be available to you in a specific script / document.

:::panel-tabset
## `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` R

R libraries are loaded with the `library` function

```{r, warning = F, message = F}
library(tidyverse)
library(lterdatasampler)
```

## `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` Python

Python libraries are loaded with `import` and can be aliased into simpler names with `as` at the same time.

```{python}
import pandas as pd
```
:::

## Data Import

We can now load an external dataset derived from the `lterdatasampler` R package (see here) with both R and Python. This relatively simple operation is also a nice chance to showcase how 'namespacing' (i.e., indicating which package a given function comes from) differs between the two languages.

:::panel-tabset
## `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` R

Namespacing in R is accomplished by doing `package_name::function_name` and is optional (though, in my opinion, good practice!)

```{r}
vert_R <- utils::read.csv(file = 'data/verts.csv')
```

## `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` Python

In Python, namespacing is required and is done via `package_name.function_name`.

```{python}
vert_py = pd.read_csv('data/verts.csv')
```
:::

## Making Heads or Tails of Data

Checking the 'head' or 'tail' of the data (i.e., the first or last few rows of the data respectively) is a nice way of getting a sense for the general format of the dataframe being assessed.

::: panel-tabset
## `r fontawesome::fa("r-project", fill = "#FF9B00", a11y = "sem")` R

In R, we use the `head` or `tail` function and can use an optional `n` argument to specify the number of rows to return as an integer (default is 6 rows). Functions in R act on contents _inside of parentheses_.

```{r}
utils::head(vert_R, n = 2)
utils::tail(vert_R, n = 3)
```

## `r fontawesome::fa("python", fill = "#077DC2", a11y ="sem")` Python

In Python we also use a `head` or `tail` function but instead of placing the data object inside of parentheses attached to the function we _append the function name after the name of the data object separated by a period_. This is visually similar to how we namespace functions in Python! You can again specify an integer number of rows to return (the default is 5)

```{python}
vert_py.head(3)
vert_py.tail(2)
```
:::










## Template Tabset Panel Area

:::panel-tabset
## `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` R

```{r}
# X
```

## `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` Python
```{python}
# X
```
:::

