{
  "hash": "73fef3e2fcc3ba989822b71bdaf3a545",
  "result": {
    "markdown": "---\ntitle: \"SQL\"\nengine: knitr\n---\n\n\n## Overview\n\nSo far, we've been able to use [{{< fa brands python >}} Python]{.py} or [{{< fa brands r-project >}} R]{.r} on CSV files without issue. However, when the data that we are working with become very large (e.g., millions of rows) it can be very inefficient to rely on your computer's internal memory to do operations. `<svg aria-label=\"Database\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#283E82;overflow:visible;position:relative;\"><title>Database</title><path d=\"M448 80v48c0 44.2-100.3 80-224 80S0 172.2 0 128V80C0 35.8 100.3 0 224 0S448 35.8 448 80zM393.2 214.7c20.8-7.4 39.9-16.9 54.8-28.6V288c0 44.2-100.3 80-224 80S0 332.2 0 288V186.1c14.9 11.8 34 21.2 54.8 28.6C99.7 230.7 159.5 240 224 240s124.3-9.3 169.2-25.3zM0 346.1c14.9 11.8 34 21.2 54.8 28.6C99.7 390.7 159.5 400 224 400s124.3-9.3 169.2-25.3c20.8-7.4 39.9-16.9 54.8-28.6V432c0 44.2-100.3 80-224 80S0 476.2 0 432V346.1z\"/></svg>`{=html} [SQL]{.sql} (<u>S</u>tructured <u>Q</u>uery <u>L</u>anguage) is another programming language specifically built to work with larger databases where users \"query\" just the component of the data that they need for a given operation. This minimizes the amount of data that must be held in memory at any given time.\n\nA caveat before we begin: `<svg aria-label=\"Database\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#283E82;overflow:visible;position:relative;\"><title>Database</title><path d=\"M448 80v48c0 44.2-100.3 80-224 80S0 172.2 0 128V80C0 35.8 100.3 0 224 0S448 35.8 448 80zM393.2 214.7c20.8-7.4 39.9-16.9 54.8-28.6V288c0 44.2-100.3 80-224 80S0 332.2 0 288V186.1c14.9 11.8 34 21.2 54.8 28.6C99.7 230.7 159.5 240 224 240s124.3-9.3 169.2-25.3zM0 346.1c14.9 11.8 34 21.2 54.8 28.6C99.7 390.7 159.5 400 224 400s124.3-9.3 169.2-25.3c20.8-7.4 39.9-16.9 54.8-28.6V432c0 44.2-100.3 80-224 80S0 476.2 0 432V346.1z\"/></svg>`{=html} [SQL]{.sql} is a fully fledged language in its own right that carries a suite of verbs and syntax conventions. We'll need to engage with these a little in our examples but this website is not meant as a tutorial in this language. Note that [{{< fa brands r-project >}} R]{.r} users may have some `<svg aria-label=\"Database\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#283E82;overflow:visible;position:relative;\"><title>Database</title><path d=\"M448 80v48c0 44.2-100.3 80-224 80S0 172.2 0 128V80C0 35.8 100.3 0 224 0S448 35.8 448 80zM393.2 214.7c20.8-7.4 39.9-16.9 54.8-28.6V288c0 44.2-100.3 80-224 80S0 332.2 0 288V186.1c14.9 11.8 34 21.2 54.8 28.6C99.7 230.7 159.5 240 224 240s124.3-9.3 169.2-25.3zM0 346.1c14.9 11.8 34 21.2 54.8 28.6C99.7 390.7 159.5 400 224 400s124.3-9.3 169.2-25.3c20.8-7.4 39.9-16.9 54.8-28.6V432c0 44.2-100.3 80-224 80S0 476.2 0 432V346.1z\"/></svg>`{=html} [SQL]{.sql} intuition already because `<svg aria-label=\"Database\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#283E82;overflow:visible;position:relative;\"><title>Database</title><path d=\"M448 80v48c0 44.2-100.3 80-224 80S0 172.2 0 128V80C0 35.8 100.3 0 224 0S448 35.8 448 80zM393.2 214.7c20.8-7.4 39.9-16.9 54.8-28.6V288c0 44.2-100.3 80-224 80S0 332.2 0 288V186.1c14.9 11.8 34 21.2 54.8 28.6C99.7 230.7 159.5 240 224 240s124.3-9.3 169.2-25.3zM0 346.1c14.9 11.8 34 21.2 54.8 28.6C99.7 390.7 159.5 400 224 400s124.3-9.3 169.2-25.3c20.8-7.4 39.9-16.9 54.8-28.6V432c0 44.2-100.3 80-224 80S0 476.2 0 432V346.1z\"/></svg>`{=html} [SQL]{.sql} shares many of its verbs with the `dplyr` package.\n\n## Library Loading\n\nBegin by loading the needed libraries.\n\n:::panel-tabset\n## [{{< fa brands r-project >}}]{.r} R\n\nLoad the `DBI` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load needed libraries\nlibrary(DBI)\n```\n:::\n\n\n## [{{< fa brands python >}}]{.py} Python\n\nLoad the `pandas`, `os`, and `sqlite3` packages.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Load needed libraries\nimport os\nimport pandas as pd\nimport sqlite3\n```\n:::\n\n:::\n\n## Connecting to Databases\n\nSQLite operations require us to connect to a database, perform desired operations, and then _close the connection_ when we are finished. A good introduction to this is showing how one can list the data tables available in a given database; this is _vital_ information for doing any \"real\" queries as we need to know the name of the table from which we want to extract data.\n\n:::panel-tabset\n## [{{< fa brands r-project >}}]{.r} R\n\nIn [{{< fa brands r-project >}} R]{.r} we can open the connection with the `dbConnect` function, identify the tables in the database with the `dbListTables` function and--eventually--close the connection with the `dbDisconnect` function (all of which are in the `DBI` package).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Open the connection\ncxn <- DBI::dbConnect(RSQLite::SQLite(), file.path(\"data\", \"mammals.sqlite\"))\n\n# Identify tables in the database\nDBI::dbListTables(conn = cxn)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"plots\"   \"species\" \"surveys\"\n```\n:::\n\n```{.r .cell-code}\n# Close the connection\nDBI::dbDisconnect(conn = cxn)\n```\n:::\n\n\n## [{{< fa brands python >}}]{.py} Python\n\nIn [{{< fa brands python >}} Python]{.py} we can open the connection with the `connect` function (from the `sqlite3` library), identify the tables in the database with the `read_sql_query` function (from `pandas`) and--eventually--close the connection with the `close` method.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Open the connection\ncxn = sqlite3.connect(os.path.join(\"data\", \"mammals.sqlite\"))\n\n# Query some columns in the 'surveys' object\npd.read_sql_query(sql = \"SELECT name FROM sqlite_master WHERE type = 'table'\", con = cxn)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      name\n0  surveys\n1  species\n2    plots\n```\n:::\n\n```{.python .cell-code}\n\n# Close the connection\ncxn.close()\n```\n:::\n\n:::\n\n## Extracting Data\n\nConnecting and listing the available data in a given database is all well and good but really what we want to do is extract some of the data for later use. To do this we still need to open (and eventually close!) the connection but between those two steps we can use `<svg aria-label=\"Database\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#283E82;overflow:visible;position:relative;\"><title>Database</title><path d=\"M448 80v48c0 44.2-100.3 80-224 80S0 172.2 0 128V80C0 35.8 100.3 0 224 0S448 35.8 448 80zM393.2 214.7c20.8-7.4 39.9-16.9 54.8-28.6V288c0 44.2-100.3 80-224 80S0 332.2 0 288V186.1c14.9 11.8 34 21.2 54.8 28.6C99.7 230.7 159.5 240 224 240s124.3-9.3 169.2-25.3zM0 346.1c14.9 11.8 34 21.2 54.8 28.6C99.7 390.7 159.5 400 224 400s124.3-9.3 169.2-25.3c20.8-7.4 39.9-16.9 54.8-28.6V432c0 44.2-100.3 80-224 80S0 476.2 0 432V346.1z\"/></svg>`{=html} [SQL]{.sql} syntax to actually perform a query. Note that it is a good practice to fully capitalize `<svg aria-label=\"Database\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#283E82;overflow:visible;position:relative;\"><title>Database</title><path d=\"M448 80v48c0 44.2-100.3 80-224 80S0 172.2 0 128V80C0 35.8 100.3 0 224 0S448 35.8 448 80zM393.2 214.7c20.8-7.4 39.9-16.9 54.8-28.6V288c0 44.2-100.3 80-224 80S0 332.2 0 288V186.1c14.9 11.8 34 21.2 54.8 28.6C99.7 230.7 159.5 240 224 240s124.3-9.3 169.2-25.3zM0 346.1c14.9 11.8 34 21.2 54.8 28.6C99.7 390.7 159.5 400 224 400s124.3-9.3 169.2-25.3c20.8-7.4 39.9-16.9 54.8-28.6V432c0 44.2-100.3 80-224 80S0 476.2 0 432V346.1z\"/></svg>`{=html} [SQL]{.sql} verbs (e.g., `SELECT`) to help differentiate them from column / data table names.\n\nAt a minimum a query must involve `SELECT` to dictate which columns to keep (accepts either column names or a `*` for 'all columns') and `FROM` to indicate which table in the database we want to query.\n\n:::panel-tabset\n## [{{< fa brands r-project >}}]{.r} R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Open the connection\ncxn <- DBI::dbConnect(RSQLite::SQLite(), file.path(\"data\", \"mammals.sqlite\"))\n\n# Query some columns in the 'surveys' object\nquery_r <- DBI::dbGetQuery(conn = cxn, statement = \"SELECT year, species_id, plot_id FROM surveys\")\n\n# Close the connection\nDBI::dbDisconnect(conn = cxn)\n```\n:::\n\n\nNote that we can still use the query data object even when we have closed our database connection!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check out the first few rows of that\nhead(query_r, n = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  year species_id plot_id\n1 1977         NL       2\n2 1977         NL       3\n3 1977         DM       2\n4 1977         DM       7\n```\n:::\n:::\n\n\n## [{{< fa brands python >}}]{.py} Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Open the connection\ncxn = sqlite3.connect(os.path.join(\"data\", \"mammals.sqlite\"))\n\n# Query some columns in the 'surveys' object\nquery_py = pd.read_sql_query(sql = \"SELECT year, species_id, plot_id FROM surveys\", con = cxn)\n\n# Close the connection\ncxn.close()\n```\n:::\n\n\nNote that we can still use the query data object even when we have closed our database connection!\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Check out the first few rows of that\nquery_py.head(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   year species_id  plot_id\n0  1977         NL        2\n1  1977         NL        3\n2  1977         DM        2\n3  1977         DM        7\n```\n:::\n:::\n\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}