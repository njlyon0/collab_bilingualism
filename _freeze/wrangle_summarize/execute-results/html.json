{
  "hash": "b854c97ee62732b9da7995c2a73025a1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Summarizing Data\"\n---\n\n\n\n\n## Library & Data Loading\n\nBegin by loading any needed libraries and reading in an external data file for use in downstream examples.\n\n:::panel-tabset\n## [{{< fa brands r-project >}} R]{.r}\n\nLoad the `tidyverse` meta-package as well as our vertebrate data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load needed library\nlibrary(tidyverse)\n\n# Load data\nvert_r <- utils::read.csv(file = file.path(\"data\", \"verts.csv\"))\n\n# Check out first few rows\nhead(vert_r, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  year sitecode section reach pass unitnum unittype vert_index pitnumber\n1 1987 MACKCC-L      CC     L    1       1        R          1        NA\n2 1987 MACKCC-L      CC     L    1       1        R          2        NA\n3 1987 MACKCC-L      CC     L    1       1        R          3        NA\n4 1987 MACKCC-L      CC     L    1       1        R          4        NA\n5 1987 MACKCC-L      CC     L    1       1        R          5        NA\n          species length_1_mm length_2_mm weight_g clip sampledate notes\n1 Cutthroat trout          58          NA     1.75 NONE 1987-10-07      \n2 Cutthroat trout          61          NA     1.95 NONE 1987-10-07      \n3 Cutthroat trout          89          NA     5.60 NONE 1987-10-07      \n4 Cutthroat trout          58          NA     2.15 NONE 1987-10-07      \n5 Cutthroat trout          93          NA     6.90 NONE 1987-10-07      \n```\n\n\n:::\n:::\n\n\n## [{{< fa brands python >}} Python]{.py}\n\nLoad the `pandas` and `os` libraries as well as our vertebrate data.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Load needed libraries\nimport os\nimport pandas as pd\n\n# Load data\nvert_py = pd.read_csv(os.path.join(\"data\", \"verts.csv\"))\n\n# Check out first few rows\nvert_py.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   year  sitecode section reach  ...  weight_g  clip  sampledate  notes\n0  1987  MACKCC-L      CC     L  ...      1.75  NONE  1987-10-07    NaN\n1  1987  MACKCC-L      CC     L  ...      1.95  NONE  1987-10-07    NaN\n2  1987  MACKCC-L      CC     L  ...      5.60  NONE  1987-10-07    NaN\n3  1987  MACKCC-L      CC     L  ...      2.15  NONE  1987-10-07    NaN\n4  1987  MACKCC-L      CC     L  ...      6.90  NONE  1987-10-07    NaN\n\n[5 rows x 16 columns]\n```\n\n\n:::\n:::\n\n:::\n\n## Defining Groups\n\nNow that we have data, we can use it to demonstrate groupwise summarization! Both [{{< fa brands python >}} Python]{.py} and [{{< fa brands r-project >}} R]{.r} support defining the grouping structure in one step and then doing the actual summarization in subsequent steps.\n\nLet's suppose that we want to calculate average weight and length within each species and year.\n\n:::panel-tabset\n## [{{< fa brands r-project >}} R]{.r}\n\nIn [{{< fa brands r-project >}} R]{.r}, we use the `group_by` function (from `dplyr`) to define our grouping variables. Note that this changes the class from `data.frame` to `tibble` (a special dataframe-like class defined by the tidyverse in part due to this operation).\n\n`group_by`--like other functions in the tidyverse--allows for 'tidy select' column names where column names are provided without quotes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define grouping variables\nvert_r_grp <- dplyr::group_by(.data = vert_r, year, species)\n\n# Check class of resulting object\nclass(vert_r_grp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"grouped_df\" \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n\n## [{{< fa brands python >}} Python]{.py}\n\nIn [{{< fa brands python >}} Python]{.py}, we can use the `groupby` method (available to all variables of type `DataFrame`). This method does accept multiple column labels but they must be provided as a list (i.e., wrapped in square brackets) and the labels themselves must be wrapped in quotes.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Define grouping variables\nvert_py_grp = vert_py.groupby([\"year\", \"species\"])\n\n# Check type of resulting variable\ntype(vert_py_grp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.groupby.generic.DataFrameGroupBy'>\n```\n\n\n:::\n:::\n\n:::\n\n## Groupwise Summarization\n\nOnce we've established the columns for which we want to calculate summary statistics we can move on to the tools that actually allow summarization steps to take place. Note that _summarization_ implicitly means that we should lose rows because we should only have one row per combination of grouping column content combination. Adding columns is not necessarily summarization if it doesn't shed rows.\n\n:::panel-tabset\n## [{{< fa brands r-project >}} R]{.r}\n\n[{{< fa brands r-project >}} R]{.r} allows for multiple summary metrics to be calculate simultaneously within `dplyr`'s `summarize` function.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate average weight and length\nvert_r_summary <- dplyr::summarize(.data = vert_r_grp,\n                 weight_g = mean(weight_g, na.rm = T),\n                 length_1_mm = mean(length_1_mm, na.rm = T),\n                 length_2_mm = mean(length_2_mm, na.rm = T))\n\n# Check out the first bit of that\nhead(vert_r_summary, n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 5\n# Groups:   year [3]\n   year species         weight_g length_1_mm length_2_mm\n  <int> <chr>              <dbl>       <dbl>       <dbl>\n1  1987 Cutthroat trout     8.96        90.2         NaN\n2  1988 Cutthroat trout    16.1        115.          NaN\n3  1989 Cutthroat trout    14.3        107.          NaN\n```\n\n\n:::\n:::\n\n\n## [{{< fa brands python >}} Python]{.py}\n\nWhen summarizing data in [{{< fa brands python >}} Python]{.py} we need to calculate each metric separately and then combine them. Apologies that this uses the `concat` function in `pandas` that we have not previously covered but you can see a greater discussion of these functions/methods in the \"Join\" section.\n\nNote the use of two modes of indexing a particular column.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Calculate average weight and length\nmean_wt = vert_py_grp[\"weight_g\"].mean()\nmean_ln1 = vert_py_grp.length_1_mm.mean()\nmean_ln2 = vert_py_grp[\"length_2_mm\"].mean()\n\n# Combine them\nvert_py_summary = pd.concat([mean_wt, mean_ln1, mean_ln2], axis = 1)\n\n# Do some small index reformatting steps\nvert_py_summary = vert_py_summary.reset_index().rename_axis(mapper = None, axis = 1)\n\n# Check out that\nvert_py_summary.head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   year          species   weight_g  length_1_mm  length_2_mm\n0  1987  Cutthroat trout   8.959867    90.170813          NaN\n1  1988  Cutthroat trout  16.073510   115.417219          NaN\n2  1989  Cutthroat trout  14.308766   107.038961          NaN\n```\n\n\n:::\n:::\n\nThe index re-setting is needed for [{{< fa brands python >}} Python]{.py} just to make sure the columns and rows are indexed as they should be.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}