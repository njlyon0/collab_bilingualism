---
title: "Fundamentals"
---

## Overview

This section covers the most fundamental operations / terms of R and python. Object assignment, classes, etc.

## Library Loading

This section assumes you've already installed the needed python / R packages. See the chunks in the home page of this website if you need a refresher on which packages are needed. It is not enough to install a package onto a given computer, you also have to specifically load that library into your working environment for its functions to be available to you in a specific script / document.

:::panel-tabset
## `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` R

R libraries are loaded with the `library` function

```{r r-libs, warning = F, message = F}
library(tidyverse)
```

## `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` Python

python libraries are loaded with `import` and can be aliased into simpler names with `as` at the same time.

```{python py-libs}
import numpy as np
```
:::

## Class & Type

We often want to know the "class" of an object to know what operations we can perform on that object. For example, we can only do arithmetic operations on objects that are some kind "numeric" (R) / "float" (python) or "integer" (both).

:::panel-tabset
## `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` R

In R we use the `class` function to get this information. Note that the class of text in R is "character".

```{r r-class}
# Check class of an integer
class(37)

# Check class of a decimal
class(3.14159)

# Check class of text
class("my hands are typing words")
```

## `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` Python

In python, the `type` function returns the class of the data object. Note that the text has class of "str" (short for string).

```{python py-class}
# Check type of an integer
type(37)

# Check type of a decimal
type(3.14159)

# Check type of text
type("my hands are typing words")
```
:::

## Character Counting

Sometimes we want to know how many characters are in a given string. Note that in python this is called "length" which is **not the same** as "length" in an R context. In R, "length" refers to the number of elements in a vector and 'number of characters' is a better parallel for "length" _sensu_ python. 

:::panel-tabset
## `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` R

In R, we use the `nchar` function (short for 'number of characters').

```{r r-length}
nchar("Hello")
```

## `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` Python

In python, the equivalent function is `len`.

```{python py-length}
len("Hello")
```
:::

## Concatenation

We can add multiple objects together with concatenation in both languages but how they get added together differs in an important way between the two.

:::panel-tabset
## `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` R

In R, we use the `c` function and separate each element with commas. We are left with a vector of however many elements were included in the concatenation function. To get a similar output to how python treats concatenation we actually have to use the `paste0` function.

```{r r-concat}
# R concatenation
c("Hello", "friend")

# R version of python concatenation
paste0("Hello", "friend")
```

## `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` Python

In python, concatenation uses plus signs (`+`) instead of the function-based approach of R. In order to concatenate elements into a vector (like R does), we need to use the `array` function in the `numpy` package.

```{python py-concat}
# python concatenation
"Hello" + "friend"

# python version of R concatenation
## Make a "list" (not the same as an R list)
py_concat_list = ["Hello", "friend"]

## Use the relevant numpy function
py_concat_vec = np.array(py_concat_list)

## Print that to display it visually
print(py_concat_vec)
```
:::

## Repetition

If you want to repeat a string that is also a supported operation

:::panel-tabset
## `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` R

R uses the `rep` function with a `times` argument to specify the number of times to repeat.

```{r r-reps}
rep(x = "Bye", times = 3)
```

## `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` Python

In python, we can use an asterisk as shorthand for repetition with the thing to repeat on the left and the number of repetitions on the right.

```{python py-reps}
"Bye" * 3
```
:::

## String Indexing

We may also want to access the _n_th element of a character string. We can do that by "indexing". In both python and R we use square brackets (`\[\]`) to do this but there are two key differences. In R, we index an element of a vector and the first index value is 1 but in python we're indexing a character in a string and the index begins at 0.

:::panel-tabset
## `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` R

```{r r-index}
# Access third element of a vector
c("Hello", "my", "friend")[3]
```

## `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` Python

Note again the the "third" character is actually the fourth letter because the first letter's index value is 0!

```{python py-index}
# Access third character of a string
"friend"[3]
```
:::

