{
  "hash": "6682e4afa8945019f4a2cb027d6bbd68",
  "result": {
    "markdown": "---\ntitle: \"Glossary\"\nengine: knitr\n---\n\n\n## Overview\n\nLearning a programming language is just like learning a spoken language: there are a lot of terms and definitions to learn! To complicate matters for an [{{< fa brands r-project >}} R]{.r} / [{{< fa brands python >}} Python]{.py} bilingualism context like this one, the two programming languages sometimes use the same term with very different definitions attached. To hopefully streamline term acquisition / comparison, I'm compiling a glossary of crucial [{{< fa brands r-project >}} R]{.r} and [{{< fa brands python >}} Python]{.py} terms below.\n\nNote that if a definition has a term in both languages, the definition is given with the terms in the respective languages beneath. If a term is only found in one language it is given first and subsequently defined.\n\n## General Terms\n\n- Data stored for later re-use (regardless of structure/dimensions)\n    - [{{< fa brands python >}} Python]{.py} -- variable\n    -  [{{< fa brands r-project >}} R]{.r} -- object\n\n- Category of information stored in a given data [variable]{.py}/[object]{.r}\n    - [{{< fa brands python >}} Python]{.py} -- type\n    -  [{{< fa brands r-project >}} R]{.r} -- class\n\n- Downloadable set of functions\n    - [{{< fa brands python >}} Python]{.py} & [{{< fa brands r-project >}} R]{.r} -- library / package\n    - See \"Tools\" for definition of 'function'\n\n## Data [Types]{.py}/[Classes]{.r}\n\n- Numbers that are not a fraction (i.e., are a whole number)\n    - [{{< fa brands python >}} Python]{.py} & [{{< fa brands r-project >}} R]{.r} -- integer\n    - [{{< fa brands python >}} Python]{.py} `pandas` library -- int64\n\n- Non-integer numbers\n    - [{{< fa brands python >}} Python]{.py} -- float\n    - [{{< fa brands python >}} Python]{.py} `pandas` library -- float64\n    -  [{{< fa brands r-project >}} R]{.r} -- numeric\n\n- Text / content stored as text\n    - [{{< fa brands python >}} Python]{.py} -- string\n    - [{{< fa brands python >}} Python]{.py} `pandas` library -- object\n    -  [{{< fa brands r-project >}} R]{.r} -- character\n\n- Categorical content with an order among the unique entries (often--though not necessarily--with few _unique_ entries relative to _total_ number of entries)\n    -  [{{< fa brands r-project >}} R]{.r} _ONLY_ -- factor\n\n- Logical values indicating whether conditions are met\n    - [{{< fa brands python >}} Python]{.py} -- boolean (`True` / `False`)\n    -  [{{< fa brands r-project >}} R]{.r} -- boolean (`TRUE` / `FALSE` / `T` / `F`)\n\n- [Variable]{.py}/[Object]{.r} holding an ordered sequence of data (_can_ be modified)\n   - [{{< fa brands python >}} Python]{.py} -- list\n    -  [{{< fa brands r-project >}} R]{.r} -- vector (_must_ be one-dimensional) / list\n\n- Each component of a [list]{.py}/[list]{.r}\n   - [{{< fa brands python >}} Python]{.py} -- item\n    -  [{{< fa brands r-project >}} R]{.r} -- element\n\n- [Variable]{.py} holding an ordered sequence of data (_cannot_ be modified)\n   - [{{< fa brands python >}} Python]{.py} _ONLY_ -- tuple [too-pull]\n\n## Operators\n\n- Assignment operator -- creates a new [variable]{.py}/[object]{.r}\n    - [{{< fa brands python >}} Python]{.py} -- `=`\n    -  [{{< fa brands r-project >}} R]{.r} -- `<-` / `->`\n\n- Arithmetic operators -- performs basic arithmetic\n    - [{{< fa brands python >}} Python]{.py} & [{{< fa brands r-project >}} R]{.r} -- addition (`+`)\n    - [{{< fa brands python >}} Python]{.py} & [{{< fa brands r-project >}} R]{.r} -- subtraction (`-`)\n    - [{{< fa brands python >}} Python]{.py} & [{{< fa brands r-project >}} R]{.r} -- multiplication (`*`)\n    - [{{< fa brands python >}} Python]{.py} & [{{< fa brands r-project >}} R]{.r} -- division (`/`)\n    - [{{< fa brands python >}} Python]{.py} -- exponent (`**`)\n    -  [{{< fa brands r-project >}} R]{.r} -- exponent (`^`)\n\n- Arithmetic assignment operator -- does an arithmetic operation and stores the result in a [variable]{.py}\n    - [{{< fa brands python >}} Python]{.py} _ONLY_ -- arithmetic operator and assignment operator (e.g., `+=`)\n\n- Relational operators -- conditional statements that return boolean values\n    - [{{< fa brands python >}} Python]{.py} & [{{< fa brands r-project >}} R]{.r} -- 'exactly equal to' (`==`)\n    - [{{< fa brands python >}} Python]{.py} & [{{< fa brands r-project >}} R]{.r} -- 'not equal to' (`!=`)\n    - [{{< fa brands python >}} Python]{.py} & [{{< fa brands r-project >}} R]{.r} -- greater/less than (`>` / `<` respectively)\n    - [{{< fa brands python >}} Python]{.py} & [{{< fa brands r-project >}} R]{.r} -- greater/less than or equal to (`>=` / `<=` respectively)\n\n- Namespacing operator -- specifies library in which a given function is defined\n    - [{{< fa brands python >}} Python]{.py} -- a period `package.function` _(required)_\n    -  [{{< fa brands r-project >}} R]{.r} -- two colons `package::function` _(optional)_\n\n## Tools\n\n- [variable]{.py}/[object]{.r} containing multiple, inter-related operations that are run in a pre-defined order every time the [variable]{.py}/[object]{.r} is used\n    - [{{< fa brands python >}} Python]{.py} & [{{< fa brands r-project >}} R]{.r} -- function\n\n- Value sent to a function when called to modify behavior (sometimes optional)\n    - [{{< fa brands python >}} Python]{.py} & [{{< fa brands r-project >}} R]{.r} -- argument / parameter\n\n- Function that can only be used on a specific [type]{.py}/[class]{.r} of [variable]{.py}/[object]{.r} that supports arguments (sometimes optional) to modify behavior\n    - [{{< fa brands python >}} Python]{.py} -- method (`variable.method(...)`)\n    -  [{{< fa brands r-project >}} R]{.r} -- just a special case of function\n\n- Function that can only be used on a specific [type]{.py}/[class]{.r} of [variable]{.py}/[object]{.r} _without_ arguments to modify behavior\n    - [{{< fa brands python >}} Python]{.py} -- attribute (`variable.attribute`)\n    -  [{{< fa brands r-project >}} R]{.r} -- just a special case of function\n\n## Data Characteristics\n\n- Number of [items]{.py}/[elements]{.r} in a [variable]{.py}/[object]{.r}\n    - [{{< fa brands python >}} Python]{.py} -- length (`len()`)\n    -  [{{< fa brands r-project >}} R]{.r} -- length (`length()`)\n\n- Number of rows/columns in a two-dimension, tabular [variable]{.py}/[object]{.r}\n    - [{{< fa brands python >}} Python]{.py} -- shape (`.shape`)\n    -  [{{< fa brands r-project >}} R]{.r} -- dimensions (`dim()`)\n\n- Number of characters in a string\n    - [{{< fa brands python >}} Python]{.py} -- also length (`len()`)\n    -  [{{< fa brands r-project >}} R]{.r} -- number of characters (`nchar()`)\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}