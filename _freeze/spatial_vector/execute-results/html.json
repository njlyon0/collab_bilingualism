{
  "hash": "4db0eccfd3b7dad62d27e5c08dcd0ec0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Vector Data\"\nengine: knitr\n---\n\n\n\n\n## Library Loading\n\nBefore we can dive into \"actual\" spatial work we'll need to load some libraries.\n\n:::panel-tabset\n## [{{< fa brands r-project >}} R]{.r}\n\nLoad `sf` to work with vector data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load needed libraries\nlibrary(sf)\n```\n:::\n\n\n\n\n## [{{< fa brands python >}} Python]{.py}\n\nLoad the `geopandas` library to work with vector data. We'll also load the `os` library to deal with file path issues.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Load needed libraries\nimport os\nimport geopandas as gpd\n```\n:::\n\n\n\n:::\n\n## Loading Vector Data\n\nTo demonstrate vector data operations we'll use data on the counties in North Carolina (USA). Note that some minor preparatory work was necessary to get the data ready for our purposes here and is preserved in [this folder](https://github.com/njlyon0/collab_bilingualism/tree/main/dev) of the website's {{< fa brands github >}} GitHub repository.\n\n:::panel-tabset\n## [{{< fa brands r-project >}} R]{.r}\n\nThere are several [{{< fa brands r-project >}} R]{.r} packages for working with vector data but we'll focus on `sf`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load a shapefile of county borders\nvect_r <- sf::st_read(dsn = file.path(\"data\", \"nc.shp\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `nc' from data source \n  `/Users/lyon/Documents/personal/lyon_bilingualism/data/nc.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 100 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32377 ymin: 33.88212 xmax: -75.45662 ymax: 36.58973\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check the class of this object\nclass(vect_r)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n\n## [{{< fa brands python >}} Python]{.py}\n\nThe `geopandas` library will be our focal library for vector operations with [{{< fa brands python >}} Python]{.py}.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Load a shapefile of county borders\n\n\n# Check the class of this object\n```\n:::\n\n\n\n:::\n\n## Checking Vector CRS\n\nAs noted earlier, the very first thing we should do after reading in spatial data is _check the coordinate reference system!_\n\n:::panel-tabset\n## [{{< fa brands r-project >}} R]{.r}\n\nWe can check the CRS with the `st_crs` function (from `sf`).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check the CRS of the shapefile\nsf::st_crs(x = vect_r)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\n\n\n## [{{< fa brands python >}} Python]{.py}\n\n[{{< fa brands python >}} Python]{.py} stores raster CRS as an attribute.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Check the CRS of the shapefile\n```\n:::\n\n\n\n:::\n\n## Transforming Vector CRS\n\nOnce we know the current CRS, we can transform into a different coordinate reference system as needed. Let's transform from WGS84 into another commonly-used CRS: Albers Equal Area (EPSG code 3083).\n\nNote that while transforming a raster's CRS is very computationally intensive, transforming vector data CRS is _much_ faster. If you are trying to use vector and raster data together but they don't use the same CRS it can be quicker to transform the vector data to match the raster data (rather than vice versa).\n\n:::panel-tabset\n## [{{< fa brands r-project >}} R]{.r}\n\nFor CRS transformations in [{{< fa brands r-project >}} R]{.r} we can use the `st_transform` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transform the shapefile CRS\nvect_alber_r <- sf::st_transform(x = vect_r, crs = 3083)\n\n# Re-check the CRS to confirm it worked\nsf::st_crs(vect_alber_r)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:3083 \n  wkt:\nPROJCRS[\"NAD83 / Texas Centric Albers Equal Area\",\n    BASEGEOGCRS[\"NAD83\",\n        DATUM[\"North American Datum 1983\",\n            ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4269]],\n    CONVERSION[\"Texas Centric Albers Equal Area\",\n        METHOD[\"Albers Equal Area\",\n            ID[\"EPSG\",9822]],\n        PARAMETER[\"Latitude of false origin\",18,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8821]],\n        PARAMETER[\"Longitude of false origin\",-100,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8822]],\n        PARAMETER[\"Latitude of 1st standard parallel\",27.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8823]],\n        PARAMETER[\"Latitude of 2nd standard parallel\",35,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8824]],\n        PARAMETER[\"Easting at false origin\",1500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8826]],\n        PARAMETER[\"Northing at false origin\",6000000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8827]]],\n    CS[Cartesian,2],\n        AXIS[\"easting (X)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"northing (Y)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"State-wide spatial data presentation requiring true area measurements.\"],\n        AREA[\"United States (USA) - Texas.\"],\n        BBOX[25.83,-106.66,36.5,-93.5]],\n    ID[\"EPSG\",3083]]\n```\n\n\n:::\n:::\n\n\n\n\n## [{{< fa brands python >}} Python]{.py}\n\n[{{< fa brands python >}} Python]{.py} CRS re-projections have slightly different steps to work through.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Transform the shapefile CRS\n\n\n# Re-check the CRS to confirm it worked\n```\n:::\n\n\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}