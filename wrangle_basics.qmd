---
title: "Fundamentals"
---

## Overview

This section covers the most fundamental operations / terms of R and python. Object assignment, classes, etc.

## Package Installation

The loading of external packages containing the functions we require to actually do the bulk of data wrangling is an important preliminary step. I won't evaluate the code chunks below but you'll need to if you don't already have these packages on your local machine.

:::panel-tabset
## `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` R

R contains an `install.packages` function for installing packages.

```{r r-pkg-install, eval = F}
# Install the 'tidyverse' meta-package
install.packages("tidyverse")
```

## `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` Python

Note that python package installation is done through the CLI (<u>c</u>ommand <u>l</u>ine <u>i</u>nterface).

```{bash py-pkg-install, eval = F}
# Install the 'pandas' package
python3 -m pip install pandas
```
:::

## Library Loading

It is not enough to install a package onto a given computer, you also have to specifically load that library into your working environment for its functions to be available to you in a specific script / document.

:::panel-tabset
## `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` R

R libraries are loaded with the `library` function

```{r r-libs, warning = F, message = F}
library(tidyverse)
```

## `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` Python

python libraries are loaded with `import` and can be aliased into simpler names with `as` at the same time.

```{python py-libs}
import pandas as pd
```
:::

## Class & Type

We often want to know the "class" of an object to know what operations we can perform on that object. For example, we can only do arithmetic operations on objects that are some kind "numeric" (R) / "float" (python) or "integer" (both).

:::panel-tabset
## `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` R

In R we use the `class` function to get this information. Note that the class of text in R is "character".

```{r r-class}
# Check class of an integer
class(37)

# Check class of a decimal
class(3.14159)

# Check class of text
class("my hands are typing words")
```

## `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` Python

In python, the `type` function returns the class of the data object. Note that the text has class of "str" (short for string).

```{python py-class}
# Check type of an integer
type(37)

# Check type of a decimal
type(3.14159)

# Check type of text
type("my hands are typing words")
```
:::

## Character Counting

Sometimes we want to know how many characters are in a given string. Note that in python this is called "length" which is **not the same** as "length" in an R context. In R, "length" refers to the number of elements in a vector and 'number of characters' is a better parallel for "length" _sensu_ python. 

:::panel-tabset
## `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` R

In R, we use the `nchar` function (short for 'number of characters').

```{r}
nchar("Hello")
```

## `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` Python

In python, the equivalent function is `len`.

```{python}
len("Hello")
```
:::

