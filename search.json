[
  {
    "objectID": "collabs.html",
    "href": "collabs.html",
    "title": "R / Python Bilingualism",
    "section": "",
    "text": "Contributing Overview\nA comprehensive and accessible coding bilingualism website like this one is a huge undertaking and I’d welcome collaborators who share my vision for the value of a resource like this. I’m a competent R coder but that definitely does not mean I am 100% correct all the time nor that I always write explanations in the clearest way possible. On the Python front, I’m a total novice largely reframing and recapitulating my take-aways from the tutorials that I’m taking.\nSo, if you’d like to collaborate with me on this I have the following guidelines (which I’m happy to discuss/modify with prospective collaborators!)\n\n\nBug / Issue Reporting\nIf you see something wrong–either in a code chunk or in the plain text–I’d really appreciate it if you flagged it for my attention. You can do this by opening a  GitHub Issue on this project’s repository. Please include the link to the page with the issue and as much detail as possible so I can easily find the problem area and make any needed repairs.\nIf you identify a bug in this manner I’ll add your name and a link to the professional website of your choosing to the list below!\n\nBug Finders \n\n\n\n\n\n\nCo-Development\nIf you’d like to actively collaborate with me on developing and refining this website that would be awesome! Please either reach out to me directly (see my website for my contact info) or open a  GitHub Issue to get that conversation started.\nI’m envisioning that each new collaborator would (1) fork the website’s GitHub repository, (2) make any edits that they had in mind, and (3) then submit a pull request to get those changes integrated into the primary website. I’m absolutely open to a branch-based alternative if that makes more sense and I anticipate refining the logistical elements of contributing once the development team includes more than just me.\n\n\nContribution Credit\nIf you are interested/wiling to join me in refining this website, I believe that is absolutely worthy of formal credit. You’ll notice that the top right of the navbar has a “Creators” dropdown menu. If you contribute substantively (i.e., more than indicating a simple bug fix) we can add your name and link it to the professional website of your choosing.\nIf you have other modes of properly acknowledging your contribution(s) I am absolutely open to discussing those ideas!"
  },
  {
    "objectID": "terms.html",
    "href": "terms.html",
    "title": "Glossary",
    "section": "",
    "text": "Learning a programming language is just like learning a spoken language: there are a lot of terms and definitions to learn! To complicate matters for an R / Python bilingualism context like this one, the two programming languages sometimes use the same term with very different definitions attached. To hopefully streamline term acquisition / comparison, I’m compiling a glossary of crucial R and Python terms below.\nNote that if a definition has a term in both languages, the definition is given with the terms in the respective languages beneath. If a term is only found in one language it is given first and subsequently defined."
  },
  {
    "objectID": "terms.html#overview",
    "href": "terms.html#overview",
    "title": "Glossary",
    "section": "",
    "text": "Learning a programming language is just like learning a spoken language: there are a lot of terms and definitions to learn! To complicate matters for an R / Python bilingualism context like this one, the two programming languages sometimes use the same term with very different definitions attached. To hopefully streamline term acquisition / comparison, I’m compiling a glossary of crucial R and Python terms below.\nNote that if a definition has a term in both languages, the definition is given with the terms in the respective languages beneath. If a term is only found in one language it is given first and subsequently defined."
  },
  {
    "objectID": "terms.html#general-terms",
    "href": "terms.html#general-terms",
    "title": "Glossary",
    "section": "General Terms",
    "text": "General Terms\n\nData stored for later re-use (regardless of structure/dimensions)\n\nPython Python – variable\nR Project R – object\n\nCategory of information stored in a given data variable/object\n\nPython Python – type\nR Project R – class\n\nDownloadable set of functions\n\nPython Python & R Project R – library / package\nSee “Tools” for definition of ‘function’"
  },
  {
    "objectID": "terms.html#data-typesclasses",
    "href": "terms.html#data-typesclasses",
    "title": "Glossary",
    "section": "Data Types/Classes",
    "text": "Data Types/Classes\n\nNumbers that are not a fraction (i.e., are a whole number)\n\nPython Python & R Project R – integer\n\nNon-integer numbers\n\nPython Python – float\nR Project R – numeric\n\nText / content stored as text\n\nPython Python – string\nR Project R – character\n\nText / content stored as text with few unique entries relative to total number of entries\n\nPython Python – object\nR Project R – factor\n\nLogical values indicating whether conditions are met\n\nPython Python – boolean (True / False)\nR Project R – boolean (TRUE / FALSE / T / F)\n\nVariable/Object holding an ordered sequence of data (can be modified)\n\nPython Python – list\nR Project R – vector (must be one-dimensional) / list\n\nEach component of a list/list\n\nPython Python – item\nR Project R – element\n\nVariable holding an ordered sequence of data (cannot be modified)\n\nPython Python ONLY – tuple [two-pull]"
  },
  {
    "objectID": "terms.html#operators",
    "href": "terms.html#operators",
    "title": "Glossary",
    "section": "Operators",
    "text": "Operators\n\nAssignment operator – creates a new variable/object\n\nPython Python – =\nR Project R – &lt;- / -&gt;\n\nArithmetic operators – performs basic arithmetic\n\nPython Python & R Project R – addition (+)\nPython Python & R Project R – subtraction (-)\nPython Python & R Project R – multiplication (*)\nPython Python & R Project R – division (/)\nPython Python – exponent (**)\nR Project R – exponent (^)\n\nArithmetic assignment operator – does an arithmetic operation and stores the result in a variable\n\nPython Python ONLY – arithmetic operator and assignment operator (e.g., +=)\n\nRelational operators – conditional statements that return boolean values\n\nPython Python & R Project R – ‘exactly equal to’ (==)\nPython Python & R Project R – ‘not equal to’ (!=)\nPython Python & R Project R – greater/less than (&gt; / &lt; respectively)\nPython Python & R Project R – greater/less than or equal to (&gt;= / &lt;= respectively)\n\nNamespacing operator – specifies library in which a given function is defined\n\nPython Python – a period package.function\nR Project R – two colons package::function (optional)"
  },
  {
    "objectID": "terms.html#tools",
    "href": "terms.html#tools",
    "title": "Glossary",
    "section": "Tools",
    "text": "Tools\n\nVariable/Object containing multiple, inter-related operations that are run in a pre-defined order every time the variable/object is used\n\nPython Python & R Project R – function\n\nValue sent to a function when called to modify behavior (sometimes optional)\n\nPython Python & R Project R – argument / parameter\n\nFunction that can only be used on a specific type/class of variable/object that supports arguments (sometimes optional) to modify behavior\n\nPython Python – method (variable.method(...))\nR Project R – just a special case of function\n\nFunction that can only be used on a specific type/class of variable/object without arguments to modify behavior\n\nPython Python – attribute (variable.attribute)\nR Project R – just a special case of function"
  },
  {
    "objectID": "terms.html#data-characteristics",
    "href": "terms.html#data-characteristics",
    "title": "Glossary",
    "section": "Data Characteristics",
    "text": "Data Characteristics\n\nNumber of items/elements in a variable/object\n\nPython Python – length (len())\nR Project R – length (length())\n\nNumber of rows/columns in a two-dimension, tabular variable/object\n\nPython Python – shape (.shape)\nR Project R – dimensions (dim())\n\nNumber of characters in a string\n\nPython Python – also length (len())\nR Project R – number of characters (nchar())"
  },
  {
    "objectID": "workbench.html",
    "href": "workbench.html",
    "title": "Workbench",
    "section": "",
    "text": "Place to store snippets of code / formatting that I’ll be copy/pasting a bunch"
  },
  {
    "objectID": "workbench.html#template-tabset-panel-area",
    "href": "workbench.html#template-tabset-panel-area",
    "title": "Workbench",
    "section": "Template Tabset Panel Area",
    "text": "Template Tabset Panel Area\n\nR Project RPython Python\n\n\n\n# X\n\n\n\n\n# X"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "I think of myself as a competent R coder but am a total novice when it comes to Python. This repository is my attempt at forcing myself to ‘eat my vegetables’ and gain basic competency in Python. I think trying for a 1-to-1 R translation to Python will be an effective learning method (at least to start) and enshrining it in a Quarto website will keep me rigorous about documenting my process."
  },
  {
    "objectID": "index.html#package-installation",
    "href": "index.html#package-installation",
    "title": "Welcome!",
    "section": "Package Installation",
    "text": "Package Installation\nBoth coding lanaguage rely on packages to install specific functions that are absent from the ‘base’ version of either R or Python. The following code chunks are not evaluated in the building of this website but you’ll need to install these packages on your local machine (if you haven’t already done so) in order to run the code in the rest of this translation tutorial.\n\nR Project RPython Python\n\n\nR contains an install.packages function for installing packages from within R.\n\n# Install the 'tidyverse' meta-package\ninstall.packages(\"tidyverse\")\n\n\n\nPython packages must be installed via the Command Line Interface (a.k.a. CLI, or “bash”).\n\n# Install the following python packages\npython3 -m pip install pandas\npython3 -m pip install numpy\npython3 -m pip install matplotlib\npython3 -m pip install jupyterlab\n\n## `plotnine` is `ggplot2` in python!\npython3 -m pip install plotnine"
  },
  {
    "objectID": "index.html#section-overviews",
    "href": "index.html#section-overviews",
    "title": "Welcome!",
    "section": "Section Overviews",
    "text": "Section Overviews\n\nGlossary\nAs the heading would suggest, I’m housing various term definitions here. As of now, it makes most sense to me to provide the definition for a concept and then give the term in Python Python & R Project R. Note that I also give a more functional definition of major concepts in the code tutorial pages upon first mention.\n\n\nFundamentals\nWhen learning a new programming language, it can be really helpful to begin with dramatically simplified examples to demonstrate crucial concepts. Beginning in this way provides a strong foundation for extensions into more nuanced operations.\n\n\nData Wrangling\nThe beating heart of my day to day work revolves around data ‘wrangling’. I view ‘wrangling’ as any scripted data manipulations between the very first raw data entered digitally and the data being ready for any analysis/visualization. This covers a huge swath of operations and should allow me to explore Python equivalents to many of the R operations that I know and love."
  },
  {
    "objectID": "index.html#contributing-guidelines",
    "href": "index.html#contributing-guidelines",
    "title": "Welcome!",
    "section": "Contributing Guidelines",
    "text": "Contributing Guidelines\n\nContributing Overview\nA comprehensive and accessible coding bilingualism website like this one is a huge undertaking and I’d welcome collaborators who share my vision for the value of a resource like this. I’m a competent R coder but that definitely does not mean I am 100% correct all the time nor that I always write explanations in the clearest way possible. On the Python front, I’m a total novice largely reframing and recapitulating my take-aways from the tutorials that I’m taking.\nSo, if you’d like to collaborate with me on this I have the following guidelines (which I’m happy to discuss/modify with prospective collaborators!)\n\n\nBug / Issue Reporting\nIf you see something wrong–either in a code chunk or in the plain text–I’d really appreciate it if you flagged it for my attention. You can do this by opening a  GitHub Issue on this project’s repository. Please include the link to the page with the issue and as much detail as possible so I can easily find the problem area and make any needed repairs.\nIf you identify a bug in this manner I’ll add your name and a link to the professional website of your choosing to the list below!\n\nBug Finders \n\n\n\n\n\n\nCo-Development\nIf you’d like to actively collaborate with me on developing and refining this website that would be awesome! Please either reach out to me directly (see my website for my contact info) or open a  GitHub Issue to get that conversation started.\nI’m envisioning that each new collaborator would (1) fork the website’s GitHub repository, (2) make any edits that they had in mind, and (3) then submit a pull request to get those changes integrated into the primary website. I’m absolutely open to a branch-based alternative if that makes more sense and I anticipate refining the logistical elements of contributing once the development team includes more than just me.\n\n\nContribution Credit\nIf you are interested/wiling to join me in refining this website, I believe that is absolutely worthy of formal credit. You’ll notice that the top right of the navbar has a “Creators” dropdown menu. If you contribute substantively (i.e., more than indicating a simple bug fix) we can add your name and link it to the professional website of your choosing.\nIf you have other modes of properly acknowledging your contribution(s) I am absolutely open to discussing those ideas!"
  },
  {
    "objectID": "index.html#additional-resources",
    "href": "index.html#additional-resources",
    "title": "Welcome!",
    "section": "Additional Resources",
    "text": "Additional Resources\nI’m not the first to have this idea so there are other useful Python tutorials and specifically R-Python bilingualism resources. See below:\n\nThe Carpentries has a “Data Analysis and Visualization in Python for Ecologists” lesson that is really well put-together (as is characteristic of The Carpentries’ content)\nThe Earth Lab has a Python course that was recommended to me by an NCEAS employee (specifically section 4)\nDr. Diba Mirza taught a UCSB Computer Science (CS8) course on Python\nESIIL (Environmental Data Science Innovation and Inclusion Lab) has created an R-Python bilingualism tutorial that is framed for a more applied audience\nMarie Rivers also made a website for exploring Quarto more generally that I’ve found super helpful for its facet dealing with R/Python bilingualism"
  },
  {
    "objectID": "basics.html",
    "href": "basics.html",
    "title": "Fundamentals",
    "section": "",
    "text": "This section covers some of the most fundamental operations of both languages. These include variable/object assignment, data type/class, arithmetic, etc. External data are not included in this page.\nNote that any line in a code chunk preceded by a hashtag (#) is a “comment” and is not evaluated in either language. Including comments is generally good practice because it allows humans to read and understand code that may otherwise be unclear to them."
  },
  {
    "objectID": "basics.html#overview",
    "href": "basics.html#overview",
    "title": "Fundamentals",
    "section": "",
    "text": "This section covers some of the most fundamental operations of both languages. These include variable/object assignment, data type/class, arithmetic, etc. External data are not included in this page.\nNote that any line in a code chunk preceded by a hashtag (#) is a “comment” and is not evaluated in either language. Including comments is generally good practice because it allows humans to read and understand code that may otherwise be unclear to them."
  },
  {
    "objectID": "basics.html#assignment",
    "href": "basics.html#assignment",
    "title": "Fundamentals",
    "section": "Assignment",
    "text": "Assignment\nAt its most basic, we want to store data in code in such a way that we can use / manipulate it via our scripts. This requires assigning data to a variable/object with the assignment operator.\n\nR Project RPython Python\n\n\nIn R, the assignment operator is &lt;-. To use it, the name of the new object-to-be is on the left of the arrow and the information to assign is on the right.\n\n# Make a simple object\na &lt;- 2\n\n# Check it out\na\n\n[1] 2\n\n\n\n\nIn Python, the assignment operator is =. To use it, the name of the new object-to-be is on the left of the equal sign and the information to assign is on the right.\n\n# Make a simple object\na = 2\n\n# Check it out\na\n\n2\n\n\n\n\n\nOnce we’ve created a variable/object we can then use the information stored inside of it in downstream operations! For example, we could perform basic arithmetic on our variable/object and assign the result to a new variable/object.\n\nR Project RPython Python\n\n\nAddition, subtraction, multiplication, and division share operators across both languages (+, -, *, and / respectively). However, in R exponents use ^.\n\n# Raise to an exponent\nb &lt;- a^3\n\n# Check out the result\nb\n\n[1] 8\n\n\n\n\nAddition, subtraction, multiplication, and division share operators across both languages (+, -, *, and / respectively). However, in Python exponents use **\n\n# Raise to an exponent\nb = a**3\n\n# Check out the result\nb\n\n8"
  },
  {
    "objectID": "basics.html#type-class",
    "href": "basics.html#type-class",
    "title": "Fundamentals",
    "section": "Type & Class",
    "text": "Type & Class\nSome operations are only possible on some categories of information. For instance, we can only perform arithmetic on numbers. In Python this is known as the variable’s type & while in R this is the object’s class. In either case, it’s important to know–and be able to check–this information about the variables/objects with which we are working.\n\nR Project RPython Python\n\n\nIn R we use the class function to get this information. Note that the names of R classes sometimes differ from their equivalents in Python.\n\n# Check class of an integer\nclass(37)\n\n[1] \"numeric\"\n\n\n\n# Check class of a decimal\nclass(3.14159)\n\n[1] \"numeric\"\n\n\n\n# Check class of text\nclass(\"my hands are typing words\")\n\n[1] \"character\"\n\n\n\n\nIn python, the type function returns the type of the data object. Note that the names of Python types sometimes differ from their equivalents in R.\n\n# Check type of an integer\ntype(37)\n\n&lt;class 'int'&gt;\n\n\n\n# Check type of a decimal\ntype(3.14159)\n\n&lt;class 'float'&gt;\n\n\n\n# Check type of text\ntype(\"my hands are typing words\")\n\n&lt;class 'str'&gt;"
  },
  {
    "objectID": "basics.html#indexing",
    "href": "basics.html#indexing",
    "title": "Fundamentals",
    "section": "Indexing",
    "text": "Indexing\nWhen our variables/objects have more than one item/element we may want to examine the piece of information at a specific position. This position is the “index position” and can be accessed in either language fairly easily.\nIn order to explore this more fully, let’s make some example multi-component variables/objects.\n\nR Project RPython Python\n\n\nIn R, one of the fundamental data structures is a “vector”. Vectors are assembled with the concatenation function (c) where each item is separated by commas (,) and the set of them is wrapped in parentheses ((...)).\nNote that the class of the object comes from the vector’s contents rather than the fact that it is a vector. All elements in a vector therefore must share a class.\n\n# Make a multi-item variable\nx &lt;- c(1, 2, 3, 4, 5)\n\n# Check it out\nclass(x)\n\n[1] \"numeric\"\n\n\n\n\nIn Python the fundamental data structure is a “list”. Lists are assembled either by wrapping the items to include in square brackets ([...]) or by using the list function. In either case, each item is separated from the others by commas (,).\nNote that the type of the variable comes from the list itself rather than its contents. Lists therefore support items of multiple different types.\n\n# Make a multi-item variable\nx = [1, 2, 3, 4, 5]\n\n# Check it out\ntype(x)\n\n&lt;class 'list'&gt;\n\n\n\n\n\nOne crucial difference between R and Python is that Python is “0-based” meaning that the first item is at index position 0 while in R the position of the equivalent element is 1.\nFortunately, in either language the syntax for indexing is the same.\n\nR Project RPython Python\n\n\nTo index a multi-element object, simply append square brackets to the end of the object name and specify the number of the index position in which you are interested.\n\n# Access the first element of the vector\nx[1]\n\n[1] 1\n\n\n\n\nTo index a multi-item variable, simply append square brackets to the end of the variable name and specify the number of the index position in which you are interested.\n\n# Access the first item of the list\nx[0]\n\n1"
  },
  {
    "objectID": "basics.html#slicing",
    "href": "basics.html#slicing",
    "title": "Fundamentals",
    "section": "Slicing",
    "text": "Slicing\nWhen we index more than one position, this is known as “slicing”. We can still use square brackets in either language to slice multiple items/elements and the syntax inside of those brackets seems shared but yields different results due to inherent syntactical differences.\n\nR Project RPython Python\n\n\nIn R, when we write two numbers separated by a colon (:), that indicates that we want those two numbers and all integers between them.\n\n# Demonstrate that the colon is shorthand for 'all numbers between'\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nWe can use this to slice out multiple continuous index positions from an object.\n\n# Slice items in the `x` object\nx[2:4]\n\n[1] 2 3 4\n\n\n\n\nIn order to slice in Python, we include the start and stop bounds of the items that we want to slice separated by a colon (:) inside of square brackets. The first bound (i.e., bound position 0) is actually the starting bracket of the list! This means that we can treat the first number in the slice in the same way we would in single indexing but the second number is actually the bound before the item with that index value.\nAnother way of thinking about this is that it is similar to a mathematical set. The starting bound is inclusive while the ending bound is exclusive.\n\n# Strip out several items of the Python list\nx[2:4]\n\n[3, 4]\n\n\nNotice that we only get the items at third and fourth index position despite 4 being after the colon (which in an index would return the fifth index position)? That is because the fourth bound is after the fourth item but before the fifth item."
  },
  {
    "objectID": "wrangle_data.html",
    "href": "wrangle_data.html",
    "title": "Data Operations",
    "section": "",
    "text": "Once you get a sense for the core rules of your programming language of choice, you can move on to working with a data table that is more realistically complex."
  },
  {
    "objectID": "wrangle_data.html#overview",
    "href": "wrangle_data.html#overview",
    "title": "Data Operations",
    "section": "",
    "text": "Once you get a sense for the core rules of your programming language of choice, you can move on to working with a data table that is more realistically complex."
  },
  {
    "objectID": "wrangle_data.html#library-loading",
    "href": "wrangle_data.html#library-loading",
    "title": "Data Operations",
    "section": "Library Loading",
    "text": "Library Loading\nThis section assumes you’ve already installed the needed python / R packages. See the chunks in the home page of this website if you need a refresher on which packages are needed. It is not enough to install a package onto a given computer, you also have to specifically load that library into your working environment for its functions to be available to you in a specific script / document.\n\nR Project RPython Python\n\n\nR libraries are loaded with the library function.\n\nlibrary(tidyverse)\n\n\n\nPython libraries are loaded with the import statement and can be aliased into simpler names with as at the same time.\n\nimport pandas as pd"
  },
  {
    "objectID": "wrangle_data.html#data-import",
    "href": "wrangle_data.html#data-import",
    "title": "Data Operations",
    "section": "Data Import",
    "text": "Data Import\nWe can now load an external dataset derived from the lterdatasampler R package (see here) with both R and python. This relatively simple operation is also a nice chance to showcase how ‘namespacing’ (i.e., indicating which package a given function comes from) differs between the two languages.\n\nR Project RPython Python\n\n\nNamespacing in R is accomplished by doing package_name::function_name and is optional (though, in my opinion, good practice!)\n\nvert_r &lt;- utils::read.csv(file = 'data/verts.csv')\n\n\n\nIn python, namespacing is required and is done via package_name.function_name.\n\nvert_py = pd.read_csv('data/verts.csv')"
  },
  {
    "objectID": "wrangle_data.html#making-heads-or-tails-of-data",
    "href": "wrangle_data.html#making-heads-or-tails-of-data",
    "title": "Data Operations",
    "section": "Making Heads or Tails of Data",
    "text": "Making Heads or Tails of Data\nChecking the ‘head’ or ‘tail’ of the data (i.e., the first or last few rows of the data respectively) is a nice way of getting a sense for the general format of the dataframe being assessed.\n\nR Project RPython Python\n\n\nIn R, we use the head or tail function and can use an optional n argument to specify the number of rows to return as an integer (default is 6 rows). Functions in R act on contents inside of parentheses.\n\nutils::head(vert_r, n = 2)\n\n  year sitecode section reach pass unitnum unittype vert_index pitnumber\n1 1987 MACKCC-L      CC     L    1       1        R          1        NA\n2 1987 MACKCC-L      CC     L    1       1        R          2        NA\n          species length_1_mm length_2_mm weight_g clip sampledate notes\n1 Cutthroat trout          58          NA     1.75 NONE 1987-10-07      \n2 Cutthroat trout          61          NA     1.95 NONE 1987-10-07      \n\nutils::tail(vert_r, n = 3)\n\n      year sitecode section reach pass unitnum unittype vert_index pitnumber\n32207 2019 MACKOG-U      OG     U    2      16        C         24   1043547\n32208 2019 MACKOG-U      OG     U    2      16        C         25   1043583\n32209 2019 MACKOG-U      OG     U    2      16        C         26   1043500\n                       species length_1_mm length_2_mm weight_g clip sampledate\n32207 Coastal giant salamander          67         120      9.6 NONE 2019-09-05\n32208 Coastal giant salamander          74         131     14.3 NONE 2019-09-05\n32209 Coastal giant salamander          73         128     11.6 NONE 2019-09-05\n            notes\n32207            \n32208            \n32209 Terrestrial\n\n\n\n\nIn python we also use a head or tail function but instead of placing the data object inside of parentheses attached to the function we append the function name after the name of the data object separated by a period. This is visually similar to how we namespace functions in python! You can again specify an integer number of rows to return (the default is 5)\n\nvert_py.head(3)\n\n   year  sitecode section reach  ...  weight_g  clip  sampledate  notes\n0  1987  MACKCC-L      CC     L  ...      1.75  NONE  1987-10-07    NaN\n1  1987  MACKCC-L      CC     L  ...      1.95  NONE  1987-10-07    NaN\n2  1987  MACKCC-L      CC     L  ...      5.60  NONE  1987-10-07    NaN\n\n[3 rows x 16 columns]\n\nvert_py.tail(2)\n\n       year  sitecode section reach  ...  weight_g  clip  sampledate        notes\n32207  2019  MACKOG-U      OG     U  ...      14.3  NONE  2019-09-05          NaN\n32208  2019  MACKOG-U      OG     U  ...      11.6  NONE  2019-09-05  Terrestrial\n\n[2 rows x 16 columns]"
  },
  {
    "objectID": "wrangle_data.html#dataframe-classes",
    "href": "wrangle_data.html#dataframe-classes",
    "title": "Data Operations",
    "section": "Dataframe Classes",
    "text": "Dataframe Classes\nDataframes have their own class that is different than those of simpler objects.\n\nR Project RPython Python\n\n\n\n# Check class of a data object\nclass(vert_r)\n\n[1] \"data.frame\"\n\n\n\n\n\n# Check type of a data object\ntype(vert_py)\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;"
  },
  {
    "objectID": "wrangle_data.html#data-structure",
    "href": "wrangle_data.html#data-structure",
    "title": "Data Operations",
    "section": "Data Structure",
    "text": "Data Structure\n\nFull Data Object\nOften we want to check the ‘structure’ of a data table. This includes the of each column in the data\n\nR Project RPython Python\n\n\nR uses the str function to assess data structure (not to be confused with the python object class “str”).\n\nstr(vert_r)\n\n'data.frame':   32209 obs. of  16 variables:\n $ year       : int  1987 1987 1987 1987 1987 1987 1987 1987 1987 1987 ...\n $ sitecode   : chr  \"MACKCC-L\" \"MACKCC-L\" \"MACKCC-L\" \"MACKCC-L\" ...\n $ section    : chr  \"CC\" \"CC\" \"CC\" \"CC\" ...\n $ reach      : chr  \"L\" \"L\" \"L\" \"L\" ...\n $ pass       : int  1 1 1 1 1 1 1 1 1 1 ...\n $ unitnum    : num  1 1 1 1 1 1 1 1 1 1 ...\n $ unittype   : chr  \"R\" \"R\" \"R\" \"R\" ...\n $ vert_index : int  1 2 3 4 5 6 7 8 9 10 ...\n $ pitnumber  : int  NA NA NA NA NA NA NA NA NA NA ...\n $ species    : chr  \"Cutthroat trout\" \"Cutthroat trout\" \"Cutthroat trout\" \"Cutthroat trout\" ...\n $ length_1_mm: int  58 61 89 58 93 86 107 131 103 117 ...\n $ length_2_mm: int  NA NA NA NA NA NA NA NA NA NA ...\n $ weight_g   : num  1.75 1.95 5.6 2.15 6.9 5.9 10.5 20.6 9.55 13 ...\n $ clip       : chr  \"NONE\" \"NONE\" \"NONE\" \"NONE\" ...\n $ sampledate : chr  \"1987-10-07\" \"1987-10-07\" \"1987-10-07\" \"1987-10-07\" ...\n $ notes      : chr  \"\" \"\" \"\" \"\" ...\n\n\n\n\n\nvert_py.dtypes\n\nyear             int64\nsitecode        object\nsection         object\nreach           object\npass             int64\nunitnum        float64\nunittype        object\nvert_index       int64\npitnumber      float64\nspecies         object\nlength_1_mm    float64\nlength_2_mm    float64\nweight_g       float64\nclip            object\nsampledate      object\nnotes           object\ndtype: object\n\n\n\n\n\n\n\nSpecific Column\nYou may want to check the structure of only a single column. For this, we need to use an ‘operator’ to access a single column within the dataframe object by that column’s name. Note the operator differs between the two languages.\n\nR Project RPython Python\n\n\nIn R, we use the $ operator (e.g., data_name$column_name) to access that column and pass it to functions for further processing.\n\n# Check structure of a particular column\nstr(vert_r$vert_index)\n\n int [1:32209] 1 2 3 4 5 6 7 8 9 10 ...\n\n\n\n\nIn python, we separate the dataframe name from the column name with a . (e.g., data_name.column_name) and append the function to the end with another . between.\n\n# Check structure of a particular column\nvert_py.vert_index.dtype\n\ndtype('int64')"
  }
]