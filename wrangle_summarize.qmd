---
title: "Summarizing Data"
---

## Library & Data Loading

Begin by loading any needed libraries and reading in an external data file for use in downstream examples.

:::panel-tabset
## `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` R

Load the `tidyverse` meta-package as well as our vertebrate data.

```{r r-start, warning = F, message = F}
# Load needed library
library(tidyverse)

# Load data
vert_r <- utils::read.csv(file = file.path("data", "verts.csv"))

# Check out first few rows
head(vert_r, n = 5)
```

## `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` Python

Load the `pandas` and `os` libraries as well as our simulated lichen data.

```{python py-libs}
# Load needed libraries
import os
import pandas as pd

# Load data
vert_py = pd.read_csv(os.path.join("data", "verts.csv"))

# Check out first few rows
vert_py.head()
```
:::

## Defining Groups

Now that we have data, we can use it to demonstrate groupwise summarization! Both Python and R support defining the grouping structure in one step and then doing the actual summarization in subsequent steps.

Let's suppose that we want to calculate average weight and length within each species and year.

:::panel-tabset
## `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` R

In R, we use the `group_by` function (from `dplyr`) to define our grouping variables. Note that this changes the class from `data.frame` to `tibble` (a special dataframe-like class defined by the tidyverse in part due to this operation).

`group_by`--like other functions in the tidyverse--allows for 'tidy select' column names where column names are provided without quotes.

```{r r-group}
# Define grouping variables
vert_r_grp <- dplyr::group_by(.data = vert_r, year, species)

# Check class of resulting object
class(vert_r_grp)
```

## `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` Python

In Python, we can use the `groupby` method (available to all variables of type `DataFrame`). This method does accept multiple column labels but they must be provided as a list (i.e., wrapped in square brackets) and the labels themselves must be wrapped in quotes.

```{python py-group}
# Define grouping variables
vert_py_grp = vert_py.groupby(["year", "species"])

# Check type of resulting variable
type(vert_py_grp)
```
:::

## Groupwise Summarization

Once we've established the columns for which we want to calculate summary statistics we can move on to the tools that actually allow summarization steps to take place. Note that _summarization_ implicitly means that we should lose rows because we should only have one row per combination of grouping column content combination. Adding columns is not necessarily summarization if it doesn't shed rows.

:::panel-tabset
## `r fontawesome::fa(name = "r-project", fill = "#FF9B00", a11y = "sem")` R

R allows for multiple summary metrics to be calculate simultaneously within `dplyr`'s `summarize` function.

```{r silence-dplyr}
#| echo: false

# Silence dplyr summarization message
options(dplyr.summarise.inform = F)
```

```{r r-summary}
# Calculate average weight and length
vert_r_summary <- dplyr::summarize(.data = vert_r_grp,
                 weight_g = mean(weight_g, na.rm = T),
                 length_1_mm = mean(length_1_mm, na.rm = T),
                 length_2_mm = mean(length_2_mm, na.rm = T))

# Check out the first bit of that
head(vert_r_summary, n = 3)
```

## `r fontawesome::fa(name = "python", fill = "#077DC2", a11y = "sem")` Python

When summarizing data in Python we need to calculate each metric separately and then combine them. Apologies that this uses the `concat` function in `pandas` that we have not previously covered but you can see a greater discussion of these functions/methods in the "Join" section.

Note the use of two modes of indexing a particular column.

```{python py-summary}
# Calculate average weight and length
mean_wt = vert_py_grp["weight_g"].mean()
mean_ln1 = vert_py_grp.length_1_mm.mean()
mean_ln2 = vert_py_grp["length_2_mm"].mean()

# Combine them
vert_py_summary = pd.concat([mean_wt, mean_ln1, mean_ln2], axis = 1)

# Do some small index reformatting steps
vert_py_summary = vert_py_summary.reset_index().rename_axis(mapper = None, axis = 1)

# Check out that
vert_py_summary.head(3)
```
The index re-setting is needed for Python just to make sure the columns and rows are indexed as they should be.
:::
